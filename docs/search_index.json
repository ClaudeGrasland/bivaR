[["index.html", "Introduction à la statistique bivariée et aux représentations graphiques avec R À propos de ce document Remerciements Licence", " Introduction à la statistique bivariée et aux représentations graphiques avec R Claude Grasland 2022-02-23 À propos de ce document Ce document n’est pas une introduction aux méthodes statistiques d’analyse de données. Il est basé sur R version 4.0.2 (2020-06-22). Ce document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à l’adresse : https://github.com/ClaudeGrasland/bivaR Le code source est disponible sur GitHub. Pour toute suggestion ou correction, il est possible de me contacter par mail Remerciements Ce document est généré par l’ extension bookdown de Yihui Xie, complétée par les ajouts de Julien Barnier (css, javascript, …) dans son Introduction à R et au Tidyverse Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Licence Creative Commons "],["01-principes.html", "Partie 1 Premiers pas 1.1 Opérations arithmétiques 1.2 Les objets de base : valeur, vecteur, matrice 1.3 Ne pas confondre listes et vecteurs ! 1.4 Attention aux types de variables … 1.5 Types de tableaux et guerres de religion. 1.6 En résumé 1.7 Exercices", " Partie 1 Premiers pas Mise en place : Télécharger le dossier exo1 et décompressez le sur votre ordinateur. Placez le dossier exo1 comme sous-dossier de votre dossier de cours. Puis ouvrez le programme R exo1.R 1.1 Opérations arithmétiques Nous allons commencer par passer quelques commandes arithmétiques simples. Il suffit de les taper dans la console de R pour qu’elles s’executent automatiquement. 8+2 #&gt; [1] 10 8-2 #&gt; [1] 6 8*2 #&gt; [1] 16 8/2 #&gt; [1] 4 8**2 #&gt; [1] 64 8**(1/2) #&gt; [1] 2.828427 log(10) #&gt; [1] 2.302585 log10(10) #&gt; [1] 1 sqrt(10) #&gt; [1] 3.162278 sin(pi) #&gt; [1] 1.224647e-16 cos(pi) #&gt; [1] -1 tan(pi) #&gt; [1] -1.224647e-16 1.2 Les objets de base : valeur, vecteur, matrice Les objets élémentéires de R apparaissent dans la fenêtre environnement sous la rubrique Values 1.2.1 Eléments Un élément est unique et constitue la brique de base de tous les objets suivants. On peut aussi l’interpréter comme un vecteur de longueur 1 ou une matrice de dimension 1x1. x&lt;-8 y&lt;-2 x+y #&gt; [1] 10 x*y #&gt; [1] 16 x**y #&gt; [1] 64 Les éléments se combinent différemment selon leur type. Par exemple, des éléments de type caractère (character) peuvent être assemblés avec l’instruction paste() ou découpez avec l’instruction substr() : x&lt;-&quot;Bonjour&quot; y&lt;- &quot;tout le monde&quot; z&lt;- &quot;!&quot; paste(x,y,z) #&gt; [1] &quot;Bonjour tout le monde !&quot; substr(x,1,3) #&gt; [1] &quot;Bon&quot; Quant aux éléments logiques (logical) nous verrons qu’ils peuvent se combiner avec des opérateurs comme &amp; quii signifie ET ou bien | qui signifie OU. x&lt;-TRUE y&lt;-FALSE x &amp; y #&gt; [1] FALSE x | y #&gt; [1] TRUE 1.2.2 vecteurs (vectors) Un vecteur est un ensemble d’éléments de même type que l’on a concaténés à l’aide de l’instruction c(). On peut ensuite les aditionner, les multiplier ou les combiner avec des éléments. x &lt;- c(1,2,4,8,16) y &lt;- 4 x+y #&gt; [1] 5 6 8 12 20 x*y #&gt; [1] 4 8 16 32 64 x**y #&gt; [1] 1 16 256 4096 65536 On remarque dans l’exemple ci-dessus que R n’a pas de problème pour combiner des vecteurs de tailles différentes. 1.2.3 Matrices (matrix) Une matrice est un ensemble de vecteurs de même longueur et de même type. On peut donc construire une matrice en concaténant des vecteurs verticalement avec cbind()ou horizontalement avec rbind(). # deux vecteurs x1 &lt;- c(1,2,4,8,16) x2 &lt;- c(5,10,15,20,25) # matrice en colonnes m1 &lt;- cbind(x1,x2) m1 #&gt; x1 x2 #&gt; [1,] 1 5 #&gt; [2,] 2 10 #&gt; [3,] 4 15 #&gt; [4,] 8 20 #&gt; [5,] 16 25 # matrice en lignes m2 &lt;- rbind(x1,x2) m2 #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; x1 1 2 4 8 16 #&gt; x2 5 10 15 20 25 # piège ! m3 &lt;- c(x1,x2) m3 #&gt; [1] 1 2 4 8 16 5 10 15 20 25 is.matrix(m3) #&gt; [1] FALSE Si on assemble deux vecteurs à l’aide de la commande c()on obtient un vecteur et pas une matrice. 1.3 Ne pas confondre listes et vecteurs ! R utilise des types plus complexes d’objets qui lui sont propres et qui sont en général des listes ou des listes de listes. liste simple liste de liste listes de vecteur = data.frame … Les vecteurs regroupent des éléments de même type tandis que les listes regroupent des éléments ou des objets de type quelconque. Le type liste est donc beaucoup plus général, mais aussi plus difficile d’emploi. On peut comparer une liste à un panier de course dans lequel on mélange des choux, des carottes, des navets, une boîte de douze oeufs, un paquet de croquettes pour chiens, etc… # Format vecteur prenom &lt;- c(&quot;Ali&quot;, &quot;Amine&quot;, &quot;Anne&quot;,&quot;Marc&quot;,&quot;Zayneb&quot;) sexe &lt;- c(&quot;H&quot;,&quot;H&quot;,&quot;F&quot;,&quot;H&quot;,&quot;F&quot;) age &lt;- c(21,22,24,18,25) # Format liste Ali &lt;- list(&quot;H&quot;,21) Amine &lt;- list(&quot;F&quot;,22) Anne &lt;- list(&quot;F&quot;,28) Marc &lt;- list (&quot;H&quot;,18) Zayneb &lt;- list(&quot;F&quot;,25) # Ne pas confondre ! Ali &lt;- c(&quot;H&quot;,21) Ali #&gt; [1] &quot;H&quot; &quot;21&quot; Ali &lt;- list(&quot;H&quot;,21) Ali #&gt; [[1]] #&gt; [1] &quot;H&quot; #&gt; #&gt; [[2]] #&gt; [1] 21 1.4 Attention aux types de variables … Chaque valeur, vecteur ou matrice appartient à un seul type de données. Il est important de ne pas les confondre, sous peine d’obtenir des résultats … douteux. On se limitera ici aux principaux types, d’autres étant vus ultérieurement dans l’année : numeric : type général (entier, réels, …) logique : type booleen (TRUE/FALSE) date : année, mois, jour,n heure, minutes, secondes, … character : texte quelconque factor : variable catégorielle (codage d’enquêtes …) La commande str() permet de vérifier le type d’un vecteur (ou d’une matrice) et d’en afficher la dimension. # Format charactère prenom &lt;- c(&quot;Ali&quot;, &quot;Amine&quot;,&quot;Anne&quot;, &quot;Marc&quot;,&quot;Zayneb&quot;) str(prenom) #&gt; chr [1:5] &quot;Ali&quot; &quot;Amine&quot; &quot;Anne&quot; &quot;Marc&quot; &quot;Zayneb&quot; # Format logique likeR &lt;- c(TRUE,FALSE, TRUE, FALSE, FALSE) str(likeR) #&gt; logi [1:5] TRUE FALSE TRUE FALSE FALSE # Format Factor sexe &lt;- c(1,1,2,1,2) sexe&lt;-as.factor(sexe) levels(sexe) &lt;-c(&quot;Homme&quot;,&quot;Femme&quot;) str(sexe) #&gt; Factor w/ 2 levels &quot;Homme&quot;,&quot;Femme&quot;: 1 1 2 1 2 # Format numerique age &lt;- c(21,22,24,18,25) str(age) #&gt; num [1:5] 21 22 24 18 25 # Format date nais&lt;-c(&quot;1999-10-28&quot;,&quot;1998-10-13&quot;, &quot;1996-10-15&quot;,&quot;2002-02-07&quot;,&quot;1995-06-18&quot;) nais&lt;-as.Date(nais) str(nais) #&gt; Date[1:5], format: &quot;1999-10-28&quot; &quot;1998-10-13&quot; &quot;1996-10-15&quot; &quot;2002-02-07&quot; &quot;1995-06-18&quot; 1.5 Types de tableaux et guerres de religion. R est un langage qui a beaucouop évolué au cours du temps, suscitant l’apparition de nouveaux types d’objets mieux adapéts à certaines fonctions. Du coup, il existe plusieurs format de tableaux de données, plus ou moins compatibles entre eux. On notera que dans la fenêtre environnement, les tableaux apparaissent dans la sous-fenêtre data et non plus dans la sous-fenêtre values comme c’était le cas pour les éléments, vecteurs ou matrices. 1.5.1 Le type data.frame : C’est le type d’origine correspondant à ce qu’on appelle le langage R-Base. Il se présente en pratique comme une liste de vecteurs qui peuvent être de types différents mais qui sont de même longueur. # Création d&#39;un data.frame tab1&lt;-data.frame(prenom,nais, age,sexe,likeR) str(tab1) #&gt; &#39;data.frame&#39;: 5 obs. of 5 variables: #&gt; $ prenom: chr &quot;Ali&quot; &quot;Amine&quot; &quot;Anne&quot; &quot;Marc&quot; ... #&gt; $ nais : Date, format: &quot;1999-10-28&quot; &quot;1998-10-13&quot; ... #&gt; $ age : num 21 22 24 18 25 #&gt; $ sexe : Factor w/ 2 levels &quot;Homme&quot;,&quot;Femme&quot;: 1 1 2 1 2 #&gt; $ likeR : logi TRUE FALSE TRUE FALSE FALSE 1.5.2 Le type tibble c’est un type créé par Hadley Wickham pour développer la suite de fonctions Tidyverse ou ggplot # Création d&#39;un tibble library(tidyr, quiet=T) tab2&lt;-tibble(prenom,nais, age,sexe,likeR) str(tab2) #&gt; tibble [5 × 5] (S3: tbl_df/tbl/data.frame) #&gt; $ prenom: chr [1:5] &quot;Ali&quot; &quot;Amine&quot; &quot;Anne&quot; &quot;Marc&quot; ... #&gt; $ nais : Date[1:5], format: &quot;1999-10-28&quot; &quot;1998-10-13&quot; ... #&gt; $ age : num [1:5] 21 22 24 18 25 #&gt; $ sexe : Factor w/ 2 levels &quot;Homme&quot;,&quot;Femme&quot;: 1 1 2 1 2 #&gt; $ likeR : logi [1:5] TRUE FALSE TRUE FALSE FALSE 1.5.3 Le type data.table C’est un type récent créé pour traiter les tableaux de très grande taille à l’aide du package … data.table # Création d&#39;un data.table library(data.table, quiet=T) #&gt; #&gt; Attaching package: &#39;data.table&#39; #&gt; The following objects are masked from &#39;package:dplyr&#39;: #&gt; #&gt; between, first, last #&gt; The following object is masked from &#39;package:purrr&#39;: #&gt; #&gt; transpose tab3&lt;-data.table(prenom,nais, age,sexe,likeR) str(tab3) #&gt; Classes &#39;data.table&#39; and &#39;data.frame&#39;: 5 obs. of 5 variables: #&gt; $ prenom: chr &quot;Ali&quot; &quot;Amine&quot; &quot;Anne&quot; &quot;Marc&quot; ... #&gt; $ nais : Date, format: &quot;1999-10-28&quot; &quot;1998-10-13&quot; ... #&gt; $ age : num 21 22 24 18 25 #&gt; $ sexe : Factor w/ 2 levels &quot;Homme&quot;,&quot;Femme&quot;: 1 1 2 1 2 #&gt; $ likeR : logi TRUE FALSE TRUE FALSE FALSE #&gt; - attr(*, &quot;.internal.selfref&quot;)=&lt;externalptr&gt; 1.6 En résumé R est un langage de programmation multifonction qui évolue depuis maintenant plus de 30 ans et auquel s’ajoutent continuellement de nouveaux packages. A la différence de SPSS, il n’est pas spécialisé uniquement en statistique, même si le coeur du logiciel est bien centré sur la statistique. Pour progresser rapidement en R il est indispensable : de prêter une grande attention aux types de variables et de tableaux. de ne pas chercher à utiliser trop vite de nouveaux packages tant que l’on n’a pas acquis une pratique suffisante du R-Base. de consulter la documentation et les forums de discussion en cas de difficulté. 1.7 Exercices Exercice 1 Construire le vecteur x suivant : #&gt; [1] &quot;Paris&quot; &quot;Londres&quot; &quot;Tokyo&quot; &quot;New York&quot; x &lt;- c(&quot;Paris&quot;, &quot;Londres&quot;,&quot;Tokyo&quot;,&quot;New York&quot;) Construire le vecteur y suivant : #&gt; [1] &quot;France&quot; &quot;Royaume-Uni&quot; &quot;Japon&quot; &quot;USA&quot; y &lt;- c(&quot;France&quot;, &quot;Royaume-Uni&quot;,&quot;Japon&quot;,&quot;USA&quot;) Construire le vecteur z suivant : #&gt; [1] 10.2 14.6 42.8 23.9 z &lt;- c(10.2, 14.6,42.8,23.9) Construire la matrice m1 #&gt; [,1] [,2] [,3] [,4] #&gt; x &quot;Paris&quot; &quot;Londres&quot; &quot;Tokyo&quot; &quot;New York&quot; #&gt; y &quot;France&quot; &quot;Royaume-Uni&quot; &quot;Japon&quot; &quot;USA&quot; m1&lt;-rbind(x,y) Construire le data.frame df #&gt; y x z #&gt; 1 France Paris 10.2 #&gt; 2 Royaume-Uni Londres 14.6 #&gt; 3 Japon Tokyo 42.8 #&gt; 4 USA New York 23.9 df&lt;-data.frame(y,x,z) Exercice 2 (d’après J.Barnier) On a demandé à 4 ménages le revenu des deux conjoints, et le nombre de personnes du ménage : conjoint1 &lt;- c(1200, 1180, 1750, 2100) conjoint2 &lt;- c(1450, 1870, 1690, 0) nb_personnes &lt;- c(4, 2, 3, 2) Calculer le revenu total de chaque ménage, puis diviser par le nombre de personnes pour obtenir le revenu par personne de chaque ménage. revenu_total &lt;- conjoint1 + conjoint2 revenu_total / nb_personnes "],["02-initiation.html", "Partie 2 Office killer 2.1 Rstudio et les projets R 2.2 Programme R : Excel killer ? 2.3 Document Rmd : Word killer ? 2.4 Diapos Rmd : Power Point killer 2.5 En résumé", " Partie 2 Office killer Mise en place : Télécharger le dossier exo2 et décompressez le sur votre ordinateur. Puis ouvrez le projet R exo2.Rproj dans Rstudio. Le but de ce chapitre est de montrer le plus tôt possible aux étudiants les possibilités de R et de son environnement R-Studio en ce qui concerne la production de documents ou de présentations dans le cadre d’une démarche reproductible. L’apprentissage précoce de Rmarkdown nous semble en effet indispensable, ne serait-ce que pour que les étudiants apprennent à prendre en cours des notes mélangeant les exemples de code R et les explications données en cours ou en TD. Mais le but véritable est de convaincre tout ou partie des étudiants qu’ils peuvent remplacer à terme les logiciels de bureautique des suites office par un environnement de travail plus intégré et plus performant… à condition d’oublier la souris pour revenir au clavier ! Real mensch never clcik ! 2.1 Rstudio et les projets R Au commencement, les dieux de la statistique créèrent le langage R. Mais l’interface était vide et vague, les ténèbres couvraient les lignes de code R-Studio dit : Que le projet soit et le projet fut. Si l’on veut s’épargner bien des désagréments dans l’apprentissage de R, il faut prendre dès le départ de bonnes habitudes. Parmi celles-ci, l’une des plus importantes est le fait d’inscrire toujours son travail dans le cadre d’un projet R c’est-à-dire - en simplifiant beaucoup - un répertoire de travail contenant l’ensemble des données, programmes, résultats… que l’on pourra par la suite compresser, archiver et transmettre à quelqu’un d’autre. 2.1.1 Lancement de R studio Sauf à être complètement masochiste, on n’utilise jamais R directement mais on lance d’abord l’interface R-Studio qui facilite conisdérablement l’ensemble des opérations et offre une gamme considérable de services. Il ne faut toutefois pas confondre les deux et il serait par exemple ridicule d’indiquer sur un CV en vue d’un emploi de statisticien que l’on sait utiliser R-studio en oubliant de préciser que l’on maîtrise R. 2.1.2 Création d’un projet Pour créer un projet on utilise le menus déroulant File/new project/ … et on définit un dossier de notre ordinateur (existant ou à créer) qui contiendra le projet. Une fois l’opération effectuée, on pourra constater que ce dossier contient un fichier xxx.Rproj ou xxx est en principe le nom du dossier dans lequel vous avez stocké le projet. Ce fichier contient toute une série d’informations dont nous ne parlerons pas dans ce cours d’initiation mais qui, pour faire simple, définissent un ensemble de réglages du logiciel et de préférences de l’utilisateur. Si vous fermez Rstudio (faites-le !) il vous suffira pour reprendre votre travail là où vous vous étiez arrêté : de lancer R-studio et de cliquer sur File/open project/… suivi du nom du fichier xxx.Rproj ou plus simplement encore de double cliquer sur le fichier xxx.Rproj ce qui lancera automatiquement Rstudio Le dossier contenant votre projet R peut être organisé à votre convenance. Certains mettent tout les fichier pêle-mêle dans le dossier. D’autres préfèrent créer des sous-dossiers contenant des données, des programmes, des résultats, des figures. Vous déciderez à l’usage de ce qui vous convient le mieux, mais le point important est que tout ce qui entre ou sort de vos programmes R doit être de préférence stocké dans le répertoire du projet. 2.2 Programme R : Excel killer ? C’est pourquoi tu quittera Word et Excel, et t’attachera à R studio, et vous deviendrez une seule chair. La fonction initiale d’un langage de programmation comme R est … de créer des programmes c’est-à-dire des ensembles d’instruction permettant d’accomplir une tâche à l’intérieur d’une chaîne de production. Dans le cas d’un logiciel spécialisé dans l’analyse statistique, il s’agira donc de partir de données (statistiques, géographiques, textuelles, …) pour aboutir à des résultats prenant la forme de tableaux, cartes ou graphiques. Il ne s’agit donc en somme que d’une étape du travail de recherche où le principal avantage de R est d’automatiser une tâche et de faciliter sa reproduction ultérieure avec en arrière plan un objectif de productivité puisque l’ordinateur réalise en quelques millisecondes des tâches qui prendraient des heures avec un logiciel click-bouton de type Excel. Prenons un exemple simple de problème facile à résoudre avec R mais plus compliqué avec des logiciels click-boutons. Il s’agit d’un exemple pédagogique tiré d’un très vieux cours d’analyse spatiale portant sur les semis de point et les localisations optimales. On considère une carte papier permettant de localiser 5 station services à l’intérieur d’une ville à plan en damier. Chaque station livre chacune la même quantité de carburant par semaine aux clients. On souhaite répondre aux questions suivantes : Comment saisir les données dans une fichier numérique ? Comment reproduire la carte papier sous forme d’un graphique ? Comment calculer la dsitance à vol d’oiseau entre toutes les stations ? Comment calculer la dsitance routière entre toutes les stations ? Où localiser un dépôt de carburant permettant d’alimenter les cinq stations en minimisant la distance moyenne de livraison (critère d’efficacite) Où localiser une caserne de pompier qui doit pouvoir intervenir rapidement sur toute les stations et qui doit minimiser la distance maximale à la station la plus éloignée (critère d’équité). Comment visualiser ces deux localisations sur la carte des stations ? Comment reproduire ces tâches rapidement s’il y a des ajouts ou suppressions de stations On constitue deux équipes d’étudiants, certains utilisant un programme R et d’autres Excel. On se propose de voir qui ira le plus vite sur chacune des 8 tâches proposées. 2.2.1 Round 1. Saisie des données et affichage du tableau On crée un programme R avec File/New File/R Script puis on l’enregistre avec File/Save/ … suivi du nom du programme. # Saisie des variables CODE &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) X &lt;- c(10,20,40,50,180) Y &lt;- c(40,60,40,60,50) # Regroupement dans un tableau coo &lt;- data.frame(X,Y) # Ajout du nom des lignes row.names(coo) &lt;- CODE # Affichage du tableau coo #&gt; X Y #&gt; A 10 40 #&gt; B 20 60 #&gt; C 40 40 #&gt; D 50 60 #&gt; E 180 50 Normalement, les étudiants qui utilisent un tableur ont du aller plus vite et Excel mène sur R par 1-0 2.2.2 Round 2. Affichage de la carte Vous devez essayez de reproduire l’image correspondant au problème posé plot(X,Y, col=&quot;red&quot;, pch=20, xlim=c(0,180), ylim=c(0,90), asp = 1) text(X,Y, labels = CODE, pos = 2) La création d’un graphique est à première vue plus facile avec un logiciel click-bouton. L’avantage est très clairement pour Excel qui mène désormais 2 à 0. 2.2.3 Round 3. Calcul de la station la plus accessible à vol d’oiseau (distance euclidienne) Vous devez calculer une matrice de distance euclidienne entre toutes les stations et trouver la plus accessible. # calcul la matrice de distance euclidienne mat&lt;-dist(coo, upper = T, method = &quot;euclidean&quot;) mat #&gt; A B C D E #&gt; A 22.36068 30.00000 44.72136 170.29386 #&gt; B 22.36068 28.28427 30.00000 160.31220 #&gt; C 30.00000 28.28427 22.36068 140.35669 #&gt; D 44.72136 30.00000 22.36068 130.38405 #&gt; E 170.29386 160.31220 140.35669 130.38405 # distance moyenne apply(as.matrix(mat),1,mean) #&gt; A B C D E #&gt; 53.47518 48.19143 44.20033 45.49322 120.26936 Là, je parie que les utilisateurs d’Excel ont eu un peu plus de mal … En tous les cas, Excel ne mèneplus que par 2 à 1 2.2.4 Round 4. Calcul de la station la plus accessible par la route (distance de Manhattan) Vous devez calculer une matrice de distance de Manhattan entre toutes les stations et trouver la plus accessible. # calcul la matrice de distance de Manhattan mat&lt;-dist(coo,upper = T, method = &quot;manhattan&quot;) mat #&gt; A B C D E #&gt; A 30 30 60 180 #&gt; B 30 40 30 170 #&gt; C 30 40 30 150 #&gt; D 60 30 30 140 #&gt; E 180 170 150 140 # distance moyenne de Manhattan apply(as.matrix(mat),1,mean) #&gt; A B C D E #&gt; 60 54 50 52 128 Je reconnais que c’est unpeu facile, mais à nouveau R l’emporte ce qui fait désormais match nul 2-2 2.2.5 Round 5. Localisation du dépôt de carburant Dans le cas particulier de la distance de Manhattan, le calcul du point le plus proche de tous les autres s’obtient facilement en calculant le point médian dont les coordonnées correspondent à la médiane de X et la médiane de Y. medX &lt;- median(X) medX #&gt; [1] 40 medY &lt;- median(Y) medY #&gt; [1] 50 A priori, le calcul est aussi facile dans R et dans Excel : match nul 3-3 2.2.6 Round 6. Localisation de la caserne de pompiers Dans le cas particulier de la distance de Manhattan, le calcul du point minimisant la distance maximale s’obtient en trouvant le centre du diamètre minimal en X et en Y. Il s’agit de la localisation la plus équitable où le plus défavorisé est le moins défavorisé possible. equX &lt;- (max(X)+min(X))/2 equX #&gt; [1] 95 equY &lt;- (max(Y)+min(Y))/2 equY #&gt; [1] 50 A priori, le calcul est toujours aussi facile dans R et dans Excel : match nul 4-4 2.2.7 Round 7. Visualisation des deux points sur la carte On va placer en bleu le point médian et en vert le point le plus équitable. Dans le cas de R on peut recopier les lignes de code du graphique du round n°2 ce qui gagne désormais du temps : # Programme antérieur plot(X,Y, col=&quot;red&quot;, pch=20, xlim=c(0,180), ylim=c(0,90), asp = 1) text(X,Y, labels = CODE, pos = 2) # Ajout du dépôt de carburant points(medX, medY, col=&quot;blue&quot;, pch=3) text(medX,medY, &quot;dépot&quot;,pos=1) # Ajout du point médian points(equX, equY, col=&quot;green&quot;, pch=3) text(equX,equY, &quot;caserne&quot;,pos=1) Le résultat du match est incertain mais R n’est plus désavantagé puisqu’on peut recycler les lignes de code précédentes pour le graphique de base. Disons 5-5 même s’il y a de fortes chances que R l’emporte. 2.2.8 Dernier round. Refaire toute l’analyse avec une station de plus Deux stations F(100,20) et G(150,30) ont été ajoutées. Il faut refaire la carte finale. Cela ne pose aucun problème dans R puisqu’il suffit de modifier l’entrée des données et récupérer des bouts de programme # (1) Saisie des variables CODE &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;) X &lt;- c(10,20,40,50,180,100,150) Y &lt;- c(40,60,40,60,50,20,30) coo &lt;- data.frame(X,Y) row.names(coo) &lt;- CODE # (2) calcul des points centraux medX &lt;- median(X) medY &lt;- median(Y) equX &lt;- (max(X)+min(X))/2 equY &lt;- (max(Y)+min(Y))/2 # (3) Graphique plot(X,Y, col=&quot;red&quot;, pch=20, xlim=c(0,180), ylim=c(0,90), asp = 1) text(X,Y, labels = CODE, pos = 2) # Ajout du dépôt de carburant points(medX, medY, col=&quot;blue&quot;, pch=3) text(medX,medY, &quot;Dépôt&quot;,pos=1) # Ajout du point médian points(equX, equY, col=&quot;green&quot;, pch=3) text(equX,equY, &quot;Caserne&quot;,pos=1) Excel n’a aucune chance d’aller plus vite et R remporte le match par KO ! 2.3 Document Rmd : Word killer ? R-Studio dit : « Faisons une interface de rédaction adaptée à notre travail, Que l’utilisateur puissent y insérer les tableaux, les graphiques, les cartes, les références bibliographiques, et tous les écrits qui les commentent. » Nous venons de voir comment une bonne pratique de R peut conduire progressivement à abandonner l’usage des tableurs (Excel, Open Office) sauf peut-être pour l’étape de saisie des données. Dès lors qu’il s’agit de réaliser des graphiques ou des calculs statistiques complexes, la rédaction d’un programme se révèle beaucoup plus intéressante même si elle impose un coût initial d’apprentissage. Mais une bonne pratique de R ou plus précisément des documents R markdown peut vous conduire beaucoup plus loin et vous amener à abandonner également votre logiciel de traitement de texte (Word) et votre outil de présentation (Power Point). Le coût d’apprentissage est naturellement un peu plus élevé mais les bénéfices sont à la mesure de l’investissement. Comme le montre la figure ci-dessous, un document R markdown est en quelques sorte un mélange entre des lignes de code R qui executent des tâches et des lignes de texte où sont expliqués les calculs et commentés les résultats obtenus. En d’autres termes, un document R markdown vous permet de rédiger un article de recherche complet, une présentation à une conférence, un syllabus de cours, dans un seul environnement logiciel (R studio). Nul besoin de ciseau et de colle pour aller chercher tel tableau ici, tel figure là-bas ou telle carte ailleurs. Tous ces éléments sont intégrs au fur et à mesure de la rédaction ce qui facilite considérablement la concentration. Et surtout - on l’a déjà vu pour le programme R - le document peut facilement être reproduit ou mise à jour sans être obligé de réplique des dizaines de click de souris. Nous allons illustrer l’usage de R markdown en rédigeant une courte note sur la distribution de la population et de certains commerces et services à Rennes. L’exemple est repris du Manuel d’analyse spatiale publié par l’INSEE en 2018 et plus précisement de son chapitre 4. Les configurations de points Comme nous avons pris la perspective de n’employer aucun package R au cours de cette formation initiale, les données ont été légèrement modifiées, notamment pour le tracé de la carte des contours de la ville de Rennes. 2.3.1 Chargement des données Nous disposons de trois fichiers qui comportent chacun des coordonnées de localisation utilisant la même projection Lambert et que l’on pourra de ce fait superposer. Après les avoir chargés et décrits, on en propose une première visualisation à l’aide des fonctions graphiques de base de R. 2.3.2 Contour de Rennes On charge le fichier avec read.table() puis on affiche ses premières lignes avec head()et on regarde sa taille avec dim() map &lt;- read.table(file = &quot;resources/data/rennes/map.csv&quot;, header = T, sep = &quot;;&quot;) head(map,2) #&gt; x y #&gt; 1 346382.1 6786334 #&gt; 2 346460.0 6786704 dim(map) #&gt; [1] 37 2 On affiche le contour avec les instructions plot() et lines(). On doit impérativement ajouter le paramètre asp = 1 dans plot() pour imposer une échelle identique sur l’axe vertical et l’axe horizontal. plot(map$x,map$y, col=&quot;red&quot;, asp = 1) lines(map$x,map$y, col=&quot;blue&quot;) 2.3.3 Distribution de la population On charge le fichier de population de la même manière et on constate qu’il comporte une troisième colonne indiquant la population localisée en chaque point. En fait, il s’agit d’une grille de population qui localise les habitants sur une maille de ??? m pop &lt;- read.table(file = &quot;resources/data/rennes/popu.csv&quot;, header = T, sep = &quot;;&quot;) head(pop,2) #&gt; x y pop #&gt; 1 346202.1 6790631 20 #&gt; 2 346203.4 6792843 5 dim(pop) #&gt; [1] 24916 3 On procède à une première cartographie qui ne tient pas compte de l’effectif de population mais indique juste les cases occupées et inoccupées, ce qui permet de donner une vision générale de l’occuparion du sol et du peuplement de Rennes et de l’espace environnant. plot(pop$x,pop$y, col=&quot;red&quot;, asp = 1,pch=22, cex=0.01) lines(map$x,map$y, col=&quot;black&quot;) 2.3.4 Distribution des équipements L’INSEE a extrait du fichier de la Base Publique des Equipements quatre types de localisations correspondant aux écoles, aux médecins, aux pharmacies et aux commerces de vêtements. On notera l’ajout du paramètre encoding=“UTF-8” qui permet de lire sans erreur les caractères accentués et d’éviter par exemple que “Vêtements” devienne “VÃªtements”. bpe &lt;- read.table(file = &quot;resources/data/rennes/bpe.csv&quot;, header = T, sep = &quot;;&quot;, encoding=&quot;UTF-8&quot;) head(bpe,2) #&gt; x y equ #&gt; 286 349156.2 6790525 Ecoles #&gt; 287 351800.4 6786774 Ecoles dim(bpe) #&gt; [1] 767 3 On utilise l’instruction table()pour dénombrer l’effectif de chaque équipement : table(bpe$equ) #&gt; #&gt; Ecoles Médecins Pharmacies Vêtements #&gt; 59 268 70 370 Puis on visualise après avoir attribué une couleur à chaque équipement. On crée pour cela une nouvelle variable : bpe$couleur&lt;-as.factor(bpe$equ) levels(bpe$couleur) #&gt; [1] &quot;Ecoles&quot; &quot;Médecins&quot; &quot;Pharmacies&quot; &quot;Vêtements&quot; levels(bpe$couleur)&lt;-c(&quot;blue&quot;,&quot;green&quot;,&quot;orange&quot;,&quot;red&quot;) bpe$couleur&lt;-as.character(bpe$couleur) table(bpe$couleur) #&gt; #&gt; blue green orange red #&gt; 59 268 70 370 2.3.5 Synthèse On peut désormais assembler nos trois couches : plot(pop$x,pop$y, col=&quot;gray&quot;, asp = 1,pch=22, cex=0.01) lines(map$x,map$y, col=&quot;black&quot;) points(bpe$x,bpe$y,bg=bpe$couleur, pch=21, cex=0.8) Il est facile de procéder à un zoom en ajoutant des paramètres xlim et ylim dans la fonction plot() qui précise l’espace d’étude. plot(pop$x, pop$y, col=&quot;gray&quot;, asp = 1, pch=22, cex=0.1, xlim = c(351000,353000), ylim = c(6788500,6790500)) lines(map$x, map$y, col=&quot;black&quot;) points(bpe$x, bpe$y, bg=bpe$couleur, pch=21, cex=0.8) OK, notre carte n’a pas de légende (c’est possible mais vraiment compliqué en R-Base) mais on appréciera le fait d’avoir pu la réaliser en ne se servant que de quelques fonctions élémentaires de R comme 2.4 Diapos Rmd : Power Point killer Lorsque l’on crée un fichier Markdown, on peut décider qu’il ne s’agit pas d’un document mais d’une présentation et opter pour l’un des deux modes par défaut appelés slidy et ioslides. On peut ensuite créer un diaporama en donnant un titre général et en séparant chaque diapo par un titre de niveau 2 correspondant à des lignes débutant par ## comme dans l’exemple ci-dessous : Il ne reste plus qu’à compiler le programme avec l’icône Knit (pelotte de laine) pour générer un document .html en forme de dipositives. 2.5 En résumé R est un Excel killer mais aussi un Word killer voire un Power point killer… Adopter R peut nuire gravement à vos habitudes antérieures de travail. "],["03-R-Base.html", "Partie 3 R-Base 3.1 Tableaux 3.2 Exploration I (var. quali.) 3.3 Exploration II (var. quanti) 3.4 Exploration III (2 variables) 3.5 En résumé", " Partie 3 R-Base Mise en place : Télécharger le dossier exo3 et décompressez le sur votre ordinateur. Puis ouvrez le projet R exo3.Rproj dans Rstudio. L’idée pédagogique est d’apprendre directement aux étudiants à programmer en R markdown plutôt qu’en R. Pourquoi ? Parce qu’ainsi ils vont simultanément : taper du code R qu’ils ignorent écrire sous ce code les explications du point de vue informatique observer les résultats statistiques interpréter ces résultats d’un point de vue statistique Cela n’a l’air de rien, mais en procédant ainsi les étudiants apprennent à produire à la fois leurs notes de cours en R, leurs notes de cours en statistiques et … le langage Rmarkdown pour rédiger leurs futurs travaux. Bref, si tout a bien marché, l’étudiant n’aura même pas besoin de consulter le présent document, si ce n’est pour vérifier que son programme donne les mêmes résultats … Les deux exercices qui suivent utilisent volontairement les fonctions de base du langage R (on dit que l’on programme en R-base) à l’exclusion de tout package c’est-à-dire de tout outil graphique ou statistique mis au point ultérieurement. Par comparaison avec le jeu de lego, cela revient à effectuer des constructions avec la boîte de base. A première vue cela peut sembler frustrant. Mais en réalité cela ne bride en rien l’imagination et permet d’apprendre plein de choses sans être distrait … La manipulation des tableaux de données : c’est-à-dire à la fois l’importation, le recodage éventuel des variables et la correction de leur type, la sélection de lignes ou de colonnes pour créer des sous-tableaux. L’exploration statistique univariée : c’est-à-dire le calcul de résumés simples d’une variable à l’aide de paramètres statistiques (valeurs centrales, dispersion) et la production de graphiques élémentaires. Pour rendre l’apprentissage moins austère, nous avons choisi un tableau de données original qui présente les principales caractéristiques de 25 pays européens en 1989, à la veille de la chute du Mur de Berlin. Pour ceux qui ne connaissent pas cette période ancienne, voici une petite carte : Plutôt que de se contenter apprendre par coeur des commandes R (ce qu’il faudra faire, évidemment), les étudiants seront amenés à construire un véritable rapport sur la situation économique, démographique et sociale de l’Europe en 1989, ce qui les amènera à renforcer leur pratique du R markdown. Par ailleurs, on organisera un débat entre les étudiants qui seront placés en deux groupes rivaux chargés de défendre respectivement les pays socialistes et lespays capitalistes. A chaque groupe de montrer que son système politique est le meilleur … 3.1 Tableaux 3.1.1 Importation 3.1.1.1 Localisation des fichiers La commande getwd() permet de connaître la position du répertoire courant. Si vous avez ouvert un projet (ce qui est vivement recommandé) la localisation est l’emplacement du fichier .Rproj. getwd() #&gt; [1] &quot;/Users/claudegrasland1/git/bivaR&quot; La commande list.files() permet d’examiner le contenu du répertoire courant list.files() #&gt; [1] &quot;_bookdown_files&quot; &quot;_bookdown.yml&quot; &quot;_build_all.sh&quot; #&gt; [4] &quot;_build.sh&quot; &quot;_output.yml&quot; &quot;01-principes.Rmd&quot; #&gt; [7] &quot;02-initiation.Rmd&quot; &quot;03-R-base.Rmd&quot; &quot;bivaR_cache&quot; #&gt; [10] &quot;bivaR_files&quot; &quot;bivaR.Rmd&quot; &quot;bivaR.Rproj&quot; #&gt; [13] &quot;css&quot; &quot;DESCRIPTION&quot; &quot;docs&quot; #&gt; [16] &quot;index.Rmd&quot; &quot;js&quot; &quot;latex&quot; #&gt; [19] &quot;LICENSE&quot; &quot;README.md&quot; &quot;resources&quot; 3.1.1.2 Chargement d’un fichier texte Avec la souris Cliquer sur les menus déroulants File/Import Dataset/From text (base) puis suivre le menu Avec des lignes de code On utilise par exemple la fonction read.table() en précisant les paramètres utiles : euro1988 &lt;- read.table(file = &quot;resources/data/europe88/euro1988.csv&quot;, # nom du fichier et chemin d&#39;accès sep = &quot;;&quot;, # séparateur (ici, des points-virgule) header = TRUE, # ligne d&#39;en-tête avec le nom des variables encoding=&quot;UTF-8&quot;) # encodage adapté au français 3.1.1.3 Dimensions d’un tableau La fonction dim() fournit les dimensions d’un tableau dim(euro1988) #&gt; [1] 25 15 La fonction class() fournit le type d’un tableau class(euro1988) #&gt; [1] &quot;data.frame&quot; 3.1.1.4 Visualisation du contenu d’un tableau Premières lignes avec head() head(euro1988) # Affiche par défaut les 6 premières lignes #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 1 ALB Soc 600 43.0 71 34 27 6 3.3 35 5 29 3.1 4825115 1684833 #&gt; 2 AUT Cap 10000 10.3 75 55 12 12 1.4 18 14 84 7.6 4299715 2335579 #&gt; 3 BEL Cap 9200 9.7 75 95 12 11 1.5 19 14 31 9.9 3636312 2667243 #&gt; 4 BGR Soc 2000 14.5 72 65 13 11 2.0 21 11 111 9.0 5206070 1930219 #&gt; 5 CHE Cap 17800 6.8 77 61 12 9 1.5 17 14 41 6.6 3869378 2243130 #&gt; 6 CSK Soc 3200 13.9 71 74 14 12 2.0 24 11 128 15.6 4487005 2540281 Dernières lignes avec tail() tail(euro1988,2) # Affiche les 2 dernières lignes #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 24 SWE Cap 13200 5.9 77 83 12 11 1.8 18 18 450 8.4 4321587 3961396 #&gt; 25 YUG Soc 2300 27.1 70 47 15 8 2.1 24 8 256 23.6 4686147 1996737 3.1.1.5 Verification des variables Vérifie le type avec str() str(euro1988) #&gt; &#39;data.frame&#39;: 25 obs. of 15 variables: #&gt; $ PAYS: chr &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... #&gt; $ BLOC: chr &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Soc&quot; ... #&gt; $ PNB : int 600 10000 9200 2000 17800 3200 3700 12000 12600 4800 ... #&gt; $ TMI : num 43 10.3 9.7 14.5 6.8 13.9 9.2 8.6 8.4 9 ... #&gt; $ ESP : int 71 75 75 72 77 71 72 75 75 76 ... #&gt; $ URB : int 34 55 95 65 61 74 77 94 84 91 ... #&gt; $ NAT : int 27 12 12 13 12 14 13 10 11 12 ... #&gt; $ MOR : int 6 12 11 11 9 12 13 11 11 8 ... #&gt; $ FEC : num 3.3 1.4 1.5 2 1.5 2 1.7 1.4 1.5 1.7 ... #&gt; $ JEU : int 35 18 19 21 17 24 19 15 18 23 ... #&gt; $ VIE : int 5 14 14 11 14 11 14 15 15 12 ... #&gt; $ SUP : int 29 84 31 111 41 128 108 248 43 505 ... #&gt; $ POP : num 3.1 7.6 9.9 9 6.6 15.6 16.6 61.2 5.1 39 ... #&gt; $ X : num 4825115 4299715 3636312 5206070 3869378 ... #&gt; $ Y : num 1684833 2335579 2667243 1930219 2243130 ... Recode avec les fonctions as.xxx() euro1988$BLOC&lt;-as.factor(euro1988$PAYS) str(euro1988) #&gt; &#39;data.frame&#39;: 25 obs. of 15 variables: #&gt; $ PAYS: chr &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... #&gt; $ BLOC: Factor w/ 25 levels &quot;ALB&quot;,&quot;AUT&quot;,&quot;BEL&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ PNB : int 600 10000 9200 2000 17800 3200 3700 12000 12600 4800 ... #&gt; $ TMI : num 43 10.3 9.7 14.5 6.8 13.9 9.2 8.6 8.4 9 ... #&gt; $ ESP : int 71 75 75 72 77 71 72 75 75 76 ... #&gt; $ URB : int 34 55 95 65 61 74 77 94 84 91 ... #&gt; $ NAT : int 27 12 12 13 12 14 13 10 11 12 ... #&gt; $ MOR : int 6 12 11 11 9 12 13 11 11 8 ... #&gt; $ FEC : num 3.3 1.4 1.5 2 1.5 2 1.7 1.4 1.5 1.7 ... #&gt; $ JEU : int 35 18 19 21 17 24 19 15 18 23 ... #&gt; $ VIE : int 5 14 14 11 14 11 14 15 15 12 ... #&gt; $ SUP : int 29 84 31 111 41 128 108 248 43 505 ... #&gt; $ POP : num 3.1 7.6 9.9 9 6.6 15.6 16.6 61.2 5.1 39 ... #&gt; $ X : num 4825115 4299715 3636312 5206070 3869378 ... #&gt; $ Y : num 1684833 2335579 2667243 1930219 2243130 ... 3.1.1.6 Résume du tableau La fonction summary() donne un aperçu général des variables summary(euro1988) #&gt; PAYS BLOC PNB TMI #&gt; Length:25 ALB : 1 Min. : 600 Min. : 5.80 #&gt; Class :character AUT : 1 1st Qu.: 2300 1st Qu.: 8.50 #&gt; Mode :character BEL : 1 Median : 8600 Median : 9.70 #&gt; BGR : 1 Mean : 7580 Mean :12.99 #&gt; CHE : 1 3rd Qu.:12000 3rd Qu.:14.50 #&gt; CSK : 1 Max. :17800 Max. :43.00 #&gt; (Other):19 #&gt; ESP URB NAT MOR FEC #&gt; Min. :70.00 Min. :30.00 Min. :10.0 Min. : 6.00 Min. :1.400 #&gt; 1st Qu.:72.00 1st Qu.:58.00 1st Qu.:12.0 1st Qu.: 9.00 1st Qu.:1.500 #&gt; Median :75.00 Median :71.00 Median :12.0 Median :11.00 Median :1.700 #&gt; Mean :73.72 Mean :68.44 Mean :13.4 Mean :10.36 Mean :1.816 #&gt; 3rd Qu.:75.00 3rd Qu.:83.00 3rd Qu.:14.0 3rd Qu.:11.00 3rd Qu.:2.000 #&gt; Max. :77.00 Max. :95.00 Max. :27.0 Max. :14.00 Max. :3.300 #&gt; #&gt; JEU VIE SUP POP #&gt; Min. :15.00 Min. : 5.00 Min. : 3.0 Min. : 0.40 #&gt; 1st Qu.:19.00 1st Qu.:11.00 1st Qu.: 70.0 1st Qu.: 6.60 #&gt; Median :19.00 Median :13.00 Median :128.0 Median :10.30 #&gt; Mean :21.16 Mean :12.52 Mean :190.7 Mean :19.83 #&gt; 3rd Qu.:23.00 3rd Qu.:14.00 3rd Qu.:301.0 3rd Qu.:23.60 #&gt; Max. :35.00 Max. :18.00 Max. :551.0 Max. :61.20 #&gt; #&gt; X Y #&gt; Min. :2498763 Min. :1535337 #&gt; 1st Qu.:3713871 1st Qu.:1996737 #&gt; Median :4166231 Median :2540281 #&gt; Mean :4091984 Mean :2572739 #&gt; 3rd Qu.:4686147 3rd Qu.:2851709 #&gt; Max. :5206070 Max. :4230412 #&gt; 3.1.2 Transformations 3.1.2.1 Copie intégrale Elle s’effectue avec l’opérateur &lt;- tab&lt;-euro1988 dim(tab) #&gt; [1] 25 15 head(tab,2) #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 1 ALB ALB 600 43.0 71 34 27 6 3.3 35 5 29 3.1 4825115 1684833 #&gt; 2 AUT AUT 10000 10.3 75 55 12 12 1.4 18 14 84 7.6 4299715 2335579 tail(tab,2) #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 24 SWE SWE 13200 5.9 77 83 12 11 1.8 18 18 450 8.4 4321587 3961396 #&gt; 25 YUG YUG 2300 27.1 70 47 15 8 2.1 24 8 256 23.6 4686147 1996737 3.1.2.2 Sélection de lignes On utilise la syntaxe tab2&lt;-tab[conditions , ] avec les opérateurs logiques suivants - == : est égal à - != : est différent de - &gt; : est strictement supérieur à - &lt; : est strictement inférieur à - &gt;= : est supérieur ou égal à - &lt;= : est inférieur ou égal à - &amp; : ET (vrai si les deux conditions sont vérifiées) - | : OU inclusif (vrai si l’une des conditions est vérifiée) - xor : OU exclusif (vrai si une seule des conditions est vérifiée) Exemple de sélection des pays socialistes tabsoc&lt;-euro1988[euro1988$BLOC==&quot;Soc&quot;,] tabsoc #&gt; [1] PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; &lt;0 rows&gt; (or 0-length row.names) Exemple de sélection des pays non socialistes tabcap&lt;-euro1988[euro1988$BLOC!=&quot;Soc&quot;,] tabcap #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 1 ALB ALB 600 43.0 71 34 27 6 3.3 35 5 29 3.1 4825115 1684833 #&gt; 2 AUT AUT 10000 10.3 75 55 12 12 1.4 18 14 84 7.6 4299715 2335579 #&gt; 3 BEL BEL 9200 9.7 75 95 12 11 1.5 19 14 31 9.9 3636312 2667243 #&gt; 4 BGR BGR 2000 14.5 72 65 13 11 2.0 21 11 111 9.0 5206070 1930219 #&gt; 5 CHE CHE 17800 6.8 77 61 12 9 1.5 17 14 41 6.6 3869378 2243130 #&gt; 6 CSK CSK 3200 13.9 71 74 14 12 2.0 24 11 128 15.6 4487005 2540281 #&gt; 7 DDR DDR 3700 9.2 72 77 13 13 1.7 19 14 108 16.6 4166231 2825762 #&gt; 8 DEU DEU 12000 8.6 75 94 10 11 1.4 15 15 248 61.2 3962835 2640209 #&gt; 9 DNK DNK 12600 8.4 75 84 11 11 1.5 18 15 43 5.1 3958433 3234283 #&gt; 10 ESP ESP 4800 9.0 76 91 12 8 1.7 23 12 505 39.0 2875285 1646307 #&gt; 11 FIN FIN 12200 5.8 74 62 12 10 1.6 19 13 337 4.9 4774974 4230412 #&gt; 12 FRA FRA 10100 8.0 75 73 14 10 1.8 21 13 551 55.9 3441707 2245325 #&gt; 13 GBR GBR 8900 9.5 75 91 13 12 1.8 19 15 245 57.1 3212580 3065463 #&gt; [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 12 rows ] Exemple de sélection des pays de plus 10 millions d’habitant tabbig&lt;-euro1988[euro1988$POP&gt;20,] tabbig #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; 8 DEU DEU 12000 8.6 75 94 10 11 1.4 15 15 248 61.2 3962835 2640209 #&gt; 10 ESP ESP 4800 9.0 76 91 12 8 1.7 23 12 505 39.0 2875285 1646307 #&gt; 12 FRA FRA 10100 8.0 75 73 14 10 1.8 21 13 551 55.9 3441707 2245325 #&gt; 13 GBR GBR 8900 9.5 75 91 13 12 1.8 19 15 245 57.1 3212580 3065463 #&gt; 17 ITA ITA 8600 10.1 75 72 10 10 1.4 19 13 301 57.3 4184347 1884241 #&gt; 21 POL POL 2100 17.5 71 61 17 10 2.2 26 9 313 38.0 4622269 2851709 #&gt; 23 ROU ROU 1200 25.6 70 49 16 11 2.3 25 9 238 23.0 5120263 2251425 #&gt; 25 YUG YUG 2300 27.1 70 47 15 8 2.1 24 8 256 23.6 4686147 1996737 Exemple de sélection des pays socialistes de plus 20 millions d’habitant (on mélange deux conditions avec l’opérateur &amp;) tabsocbig&lt;-euro1988[euro1988$BLOC==&quot;Soc&quot; &amp; euro1988$POP&gt;20,] tabsocbig #&gt; [1] PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X Y #&gt; &lt;0 rows&gt; (or 0-length row.names) 3.1.2.3 Sélection de colonnes On utilise la syntaxe tab2&lt;-tab[ , liste ] avec différentes syntaxes pour les listes de variables : Sélection nominale tab&lt;-euro1988[,c(&quot;PAYS&quot;, &quot;BLOC&quot;, &quot;PNB&quot;, &quot;TMI&quot;,&quot;POP&quot;)] head(tab,2) #&gt; PAYS BLOC PNB TMI POP #&gt; 1 ALB ALB 600 43.0 3.1 #&gt; 2 AUT AUT 10000 10.3 7.6 Sélection de positions tab&lt;-euro1988[,c(1:4, 13)] head(tab,2) #&gt; PAYS BLOC PNB TMI POP #&gt; 1 ALB ALB 600 43.0 3.1 #&gt; 2 AUT AUT 10000 10.3 7.6 3.1.2.4 Sélection simultanée de lignes et colonnes On utilise la syntaxe tab2&lt;-tab[ conditions , liste] Exemple : PNB et BLOC des pays de moins de 5 millions d’habitant tab&lt;-euro1988[euro1988$POP&lt;5, c(&quot;PAYS&quot;,&quot;BLOC&quot;,&quot;POP&quot;,&quot;PNB&quot;)] tab #&gt; PAYS BLOC POP PNB #&gt; 1 ALB ALB 3.1 600 #&gt; 11 FIN FIN 4.9 12200 #&gt; 16 IRL IRL 3.5 5100 #&gt; 18 LUX LUX 0.4 16500 #&gt; 20 NOR NOR 4.2 15500 3.1.3 Extractions 3.1.3.1 Extraction d’une Variable = Vecteur Solution n°1 : utilisation de l’opérateur $ myvar&lt;-euro1988$POP str(myvar) #&gt; num [1:25] 3.1 7.6 9.9 9 6.6 15.6 16.6 61.2 5.1 39 ... mean(myvar) #&gt; [1] 19.828 -Solution n°2 : utilisation de [ , ] myvar&lt;-euro1988[,13] str(myvar) #&gt; num [1:25] 3.1 7.6 9.9 9 6.6 15.6 16.6 61.2 5.1 39 ... mean(myvar) #&gt; [1] 19.828 3.1.3.2 Création d’une matrice On sélectionne les lignes et les colonnes puis on convertit en matrice avec l’instruction as.matrix(). Attention, les variables doivent être de même type (toutes numériques ou toutes caractère ou …), sinon R effectue une conversion forcée. Exemple 1 : création d’une matrice de corrélation On commence par extraire trois variables du tableau pour en faire une matrice : mymat&lt;-euro1988[,c(&quot;PNB&quot;,&quot;TMI&quot;,&quot;FEC&quot;)] row.names(mymat)&lt;-euro1988$PAYS # facultatif : donne le nom des lignes str(mymat) #&gt; &#39;data.frame&#39;: 25 obs. of 3 variables: #&gt; $ PNB: int 600 10000 9200 2000 17800 3200 3700 12000 12600 4800 ... #&gt; $ TMI: num 43 10.3 9.7 14.5 6.8 13.9 9.2 8.6 8.4 9 ... #&gt; $ FEC: num 3.3 1.4 1.5 2 1.5 2 1.7 1.4 1.5 1.7 ... mymat&lt;-as.matrix(mymat) str(mymat) #&gt; num [1:25, 1:3] 600 10000 9200 2000 17800 3200 3700 12000 12600 4800 ... #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ : chr [1:25] &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... #&gt; ..$ : chr [1:3] &quot;PNB&quot; &quot;TMI&quot; &quot;FEC&quot; Puis on applique la fonction cor() à cette matrice pour en faire une matrice de corrélation ; mycor&lt;-cor(mymat) mycor #&gt; PNB TMI FEC #&gt; PNB 1.0000000 -0.6584308 -0.6144008 #&gt; TMI -0.6584308 1.0000000 0.8136871 #&gt; FEC -0.6144008 0.8136871 1.0000000 str(mycor) #&gt; num [1:3, 1:3] 1 -0.658 -0.614 -0.658 1 ... #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ : chr [1:3] &quot;PNB&quot; &quot;TMI&quot; &quot;FEC&quot; #&gt; ..$ : chr [1:3] &quot;PNB&quot; &quot;TMI&quot; &quot;FEC&quot; Exemple 2 : Création d’une matrice de distance On commence par extraire les coordonnées (X,Y) sous forme de matrice matcoo&lt;-as.matrix(euro1988[,c(&quot;X&quot;,&quot;Y&quot;)]) row.names(matcoo)&lt;-euro1988$PAYS # facultatif : donne le nom des lignes str(matcoo) #&gt; num [1:25, 1:2] 4825115 4299715 3636312 5206070 3869378 ... #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ : chr [1:25] &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... #&gt; ..$ : chr [1:2] &quot;X&quot; &quot;Y&quot; head(matcoo) #&gt; X Y #&gt; ALB 4825115 1684833 #&gt; AUT 4299715 2335579 #&gt; BEL 3636312 2667243 #&gt; BGR 5206070 1930219 #&gt; CHE 3869378 2243130 #&gt; CSK 4487005 2540281 Puis on transforme ces coordonnées en distance à l’aide de la fonction dist() matdis&lt;-as.matrix(dist(matcoo)) str(matdis) #&gt; num [1:25, 1:25] 0 836370 1542200 453145 1106855 ... #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ : chr [1:25] &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... #&gt; ..$ : chr [1:25] &quot;ALB&quot; &quot;AUT&quot; &quot;BEL&quot; &quot;BGR&quot; ... matdis[1:10,1:5] #&gt; ALB AUT BEL BGR CHE #&gt; ALB 0.0 836370.2 1542200.5 453144.9 1106855.4 #&gt; AUT 836370.2 0.0 741690.6 992872.1 440155.5 #&gt; BEL 1542200.5 741690.6 0.0 1734169.4 483933.6 #&gt; BGR 453144.9 992872.1 1734169.4 0.0 1372828.3 #&gt; CHE 1106855.4 440155.5 483933.6 1372828.3 0.0 #&gt; CSK 919842.9 277453.7 860114.5 942990.5 685391.6 #&gt; DDR 1317515.9 508033.5 553120.4 1372320.3 653897.6 #&gt; DEU 1286962.2 454189.8 327639.9 1431684.2 407929.4 #&gt; DNK 1775368.8 961323.9 652147.5 1804766.4 995146.1 #&gt; ESP 1950211.4 1582434.4 1273370.9 2348013.0 1159491.1 Et on calcule le pays le plus proche de tous les autres à l’aide de la fonction apply() (qu’on verra ultérieurement dans un autre chapitre) mean(matdis) #&gt; [1] 1262347 access&lt;-apply(matdis, FUN=mean,1) access&lt;-access[order(access)] round(access,0) #&gt; DEU AUT DDR LUX CSK CHE BEL NLD HUN POL #&gt; 898957 926937 932604 944407 954421 966312 981428 984509 1043514 1062733 #&gt; ITA DNK FRA YUG GBR ROU ALB BGR GRC IRL #&gt; 1095500 1105659 1125130 1133254 1301552 1309032 1348834 1450710 1558508 1559733 #&gt; SWE NOR ESP FIN PRT #&gt; 1592972 1692199 1701144 1923979 1964658 3.2 Exploration I (var. quali.) 3.2.1 Sélection et recodage Les variables qualitatives nominales ou factor sont des objets composés d’une liste de numéros et d’une liste d’étiquettes. # Chargement du tableau de données don &lt;- read.table(file = &quot;resources/data/europe88/euro1988.csv&quot;, # nom du fichier et chemin d&#39;accès sep = &quot;;&quot;, # séparateur (ici, des points-virgule) header = TRUE, # ligne d&#39;en-tête avec le nom des variables encoding=&quot;UTF-8&quot;) # encodage adapté au français # Extraction de la variable X&lt;-don$BLOC X #&gt; [1] &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; #&gt; [13] &quot;Cap&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Cap&quot; #&gt; [25] &quot;Soc&quot; # Vérification du type str(X) #&gt; chr [1:25] &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Soc&quot; &quot;Soc&quot; &quot;Cap&quot; &quot;Cap&quot; &quot;Cap&quot; ... Si la variable chargée est de type character il faut la transformer avec as.factor() et repérer les niveaux disponibles avec levels() X&lt;-as.factor(X) class(X) #&gt; [1] &quot;factor&quot; levels(X) #&gt; [1] &quot;Cap&quot; &quot;Soc&quot; On peut remplacer les niveaux en utilisant l’instruction levels()à nouveau, mais suivie d’un vecteur de charactères indiquant les changements de nom. levels(X)&lt;-c(&quot;Capitaliste&quot;, &quot;Socialiste&quot;) X #&gt; [1] Socialiste Capitaliste Capitaliste Socialiste Capitaliste Socialiste #&gt; [7] Socialiste Capitaliste Capitaliste Capitaliste Capitaliste Capitaliste #&gt; [13] Capitaliste Capitaliste Socialiste Capitaliste Capitaliste Capitaliste #&gt; [19] Capitaliste Capitaliste Socialiste Capitaliste Socialiste Capitaliste #&gt; [25] Socialiste #&gt; Levels: Capitaliste Socialiste str(X) #&gt; Factor w/ 2 levels &quot;Capitaliste&quot;,..: 2 1 1 2 1 2 2 1 1 1 ... On peut transformer une variable quantitative en facteur avec la fonction cut() Y&lt;-cut(don$POP, breaks=c(0,10,30,100)) Y #&gt; [1] (0,10] (0,10] (0,10] (0,10] (0,10] (10,30] (10,30] (30,100] #&gt; [9] (0,10] (30,100] (0,10] (30,100] (30,100] (10,30] (10,30] (0,10] #&gt; [17] (30,100] (0,10] (10,30] (0,10] (30,100] (10,30] (10,30] (0,10] #&gt; [25] (10,30] #&gt; Levels: (0,10] (10,30] (30,100] str(Y) #&gt; Factor w/ 3 levels &quot;(0,10]&quot;,&quot;(10,30]&quot;,..: 1 1 1 1 1 2 2 3 1 3 ... On peut ensuite recoder les classes avec levels() levels(Y)&lt;-c(&quot;Petit&quot;,&quot;Moyen&quot;,&quot;Grand&quot;) Y #&gt; [1] Petit Petit Petit Petit Petit Moyen Moyen Grand Petit Grand Petit Grand #&gt; [13] Grand Moyen Moyen Petit Grand Petit Moyen Petit Grand Moyen Moyen Petit #&gt; [25] Moyen #&gt; Levels: Petit Moyen Grand str(Y) #&gt; Factor w/ 3 levels &quot;Petit&quot;,&quot;Moyen&quot;,..: 1 1 1 1 1 2 2 3 1 3 ... 3.2.2 Table de dénombrement Pour dénomber une variable qualitative, on utilise l’instruction table() qui crée un objet particulier qui n’est ni un data.frame, ni une matrix. tab&lt;-table(X) tab #&gt; X #&gt; Capitaliste Socialiste #&gt; 17 8 str(tab) #&gt; &#39;table&#39; int [1:2(1d)] 17 8 #&gt; - attr(*, &quot;dimnames&quot;)=List of 1 #&gt; ..$ X: chr [1:2] &quot;Capitaliste&quot; &quot;Socialiste&quot; On peut créer des tables à 2, 3 ou 4 dimensions tab2&lt;-table(X,Y) tab2 #&gt; Y #&gt; X Petit Moyen Grand #&gt; Capitaliste 9 3 5 #&gt; Socialiste 2 5 1 str(tab2) #&gt; &#39;table&#39; int [1:2, 1:3] 9 2 3 5 5 1 #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ X: chr [1:2] &quot;Capitaliste&quot; &quot;Socialiste&quot; #&gt; ..$ Y: chr [1:3] &quot;Petit&quot; &quot;Moyen&quot; &quot;Grand&quot; Un objet de type table peut être manipulé par des fonctions spéciales comme addmargins() quii rajoute des sommes en ligne (et en colonne si la table est de dimension 2) addmargins(tab) #&gt; X #&gt; Capitaliste Socialiste Sum #&gt; 17 8 25 addmargins(tab2) #&gt; Y #&gt; X Petit Moyen Grand Sum #&gt; Capitaliste 9 3 5 17 #&gt; Socialiste 2 5 1 8 #&gt; Sum 11 8 6 25 Les objets de type table sont souvent la source de crises de nerf de la part des étudiants qui les confondent avec des objets de type vecteur, matrice ou data.frame. Il existe des fonctions de conversion d’un type vers un autre mais leur emploi n’est pas très simple. On retiendra donc dans l’immédiat que les résultats de l’instruction tablesont des objets transitoires qui servent uniquement à afficher des résultats ou produire des graphiques à l’aide des instructions plot() ou barplot(). 3.2.3 Graphique avec plot() La fonction plot() s’applique à la plupart de objets R. Elle produit des résultats différents selon le type d’objet qu’elle a identifié. Si on l’applique à un vecteur de type factor on obtient un diagramme en bâtons (à ne pas confondre avec un histogramme) plot(X) On peut améliorer le graphique en lui ajoutant des paramètres c’est-à-dire des instructions séparées par des virgules. Le retour à la ligne après chaque paramètre n’est pas obligatoire mais il est recommandé car il rend le code plus clair. plot(X, col=c(&quot;blue&quot;,&quot;red&quot;), main= &quot;Europe en 1988&quot;, xlab = &quot;Type politique&quot;, ylab = &quot;Nombre de pays&quot;) 3.3 Exploration II (var. quanti) 3.3.1 Résumés numériques Une variable numérique peut faire l’objet d’un ensemble de résumés statistiques à l’aide de fonctions élémentaires min() : minimum max() : maximum mean() : moyenne sd() : écart-type (en anglais : standard deviation, soit sd en abrégé) sum() : somme X &lt;- don$FEC min(X) #&gt; [1] 1.4 max(X) #&gt; [1] 3.3 mean(X) #&gt; [1] 1.816 sd(X) #&gt; [1] 0.4160128 Pour calculer les quantiles on peut utiliser la fonction quantile() en paramétrant la valeur de fréquence cumulée ascendante quantile(X,0) : minimum quantile(X,0.10) : D1 (premier décile) quantile(X,0.25) : Q1 (premier quartile) quantile(X,0.5) : Q2 (médiane) quantile(X,0.75) : Q3 (troisième quartile) quantile(X,0.90) : D9 (dernier décile) quantile(X,1) : maximum X&lt;-don$FEC quantile(X,0.5) #&gt; 50% #&gt; 1.7 sel&lt;-c(0,0.25,0.5,0.75,1) quantile(X,sel) #&gt; 0% 25% 50% 75% 100% #&gt; 1.4 1.5 1.7 2.0 3.3 sel&lt;-c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1) quantile(X,sel) #&gt; 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% #&gt; 1.40 1.44 1.50 1.60 1.70 1.70 1.80 1.80 2.02 2.26 3.30 Il peut arriver qu’une fonction soit manquante dans R, comme par exemple le coefficient de variation. Dans ce cas, on peut faire le calcul par des lignes de code ou créer sa propre fonction avec l’instruction function(). La fonction qui est stockée en mémoire apparaît dans la fenêtre Environnement. Lorsqu’on a créé plusieurs fonctions, on peut en faire un programme R qu’on charge en mémoire au début de chaque session. A plus long terme, on peut en faire un package qu’on partagera avec les autres utilisateurs de R. A titre d’exemple, nous créons une fonction cv() qui calcule le rapport entre l’écart-type et la moyenne d’une distribution : # lignes de code X &lt;- don$FEC sd(X)/mean(X) #&gt; [1] 0.2290819 # fonction cv&lt;-function(var) {sd(var)/mean(var)} cv(X) #&gt; [1] 0.2290819 3.3.2 Dénombrement Une variable quantitative peut être discrétisée avec cut(). Elle devient alors un facteur qu’on peut dénomber avec table() puis visualiseer avec plot() sous la forme de diagramme en bâtons. X&lt;-cut(don$FEC, c(1,1.5,2,2.5,3,3.5)) str(X) #&gt; Factor w/ 5 levels &quot;(1,1.5]&quot;,&quot;(1.5,2]&quot;,..: 5 1 1 2 1 2 2 1 1 2 ... table(X) #&gt; X #&gt; (1,1.5] (1.5,2] (2,2.5] (2.5,3] (3,3.5] #&gt; 7 13 4 0 1 plot(X, col=c(&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;,&quot;red&quot;,&quot;brown&quot;), main = &quot;Fécondité en Europe en 1988&quot;, xlab = &quot;classes&quot;) 3.3.3 Boîte à moustaches La fonction boxplot() permet de visualiser une distribution sous forme de boîte à moustache où l’on repère facilement : la médiane les quartiles Q1 et Q3 le minimum et le maximum les valeurs extrêmes situées à une distance supéreiure à 1.5 x (Q3-Q1) de la médiane La syntaxe de base est la suivante : X&lt;-don$FEC boxplot(X) Mais on peut améliorer la figure avec quelques paramètres de plus boxplot(X,horizontal = TRUE, col = &quot;gray80&quot;, main = &quot;Fécondité des pays européens en 1988&quot;, xlab = &quot;nb. enfants par femme&quot;) Et on peut retirer les valeurs exceptionnelles avec le paramètre outline=FALSE boxplot(X,horizontal = TRUE, col = &quot;gray80&quot;, main = &quot;Fécondité des pays européens en 1988&quot;, xlab = &quot;nb. enfants par femme&quot;, outline = FALSE) 3.3.4 Histogramme Dans le cas d’une variable quantitative continue, la visualisation la plus logique est l’histogramme que l’on peut tracer avec la fonction hist(). Celle-ci comporte de nombreux paramètres que l’on peut visualiser dans la fenêtre Help qui se trouve en bas à gauche de R-studio : Comme d’hebitude, on peut appliquer la syntaxe la plus simple : X&lt;-don$FEC hist(X) On peut ensuite améliorer avec l’ajout de titres et un choix précis de classes. Dans le cas de la fécondité, il est par exemple important d’utiliser le seuil de 2.1 enfants par femme qui correspond au renouvellement des générations. On remarque que si les classes sont d’amplitudes inégales R utilise la densité de probabilité (rapport entre effectif et amplitude de la classe) et non plus l’effectif ce qui est statistiquement correct (et que ne fait pas Excel …). hist(X, breaks = c(1.2, 1.5, 1.8, 2.1, 2.4, 3.3), col=c(&quot;blue&quot;, &quot;lightblue&quot;,&quot;lightyellow&quot;,&quot;orange&quot;,&quot;red&quot;), main = &quot;Fécondité des pays européens en 1988&quot;, ylab = &quot;Densité de probabilité&quot;, xlab = &quot;Nombre d&#39;enfants par femme&quot;, xlim=c(1,3.5)) On peut également ajouter une courbe lissée de la distribution avec les fonctions lines() etdensity()en indiquant la portée du lissage à l'aide du paramètrebw`(band width) qui est exprimé dans l’unité de mesure de X hist(X, breaks = c(1.2, 1.5, 1.8, 2.1, 2.4, 3.3), col=c(&quot;blue&quot;, &quot;lightblue&quot;,&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;), main = &quot;Fécondité des pays européens en 1988&quot;, ylab = &quot;Densité de probabilité&quot;, xlab = &quot;Nombre d&#39;enfants par femme&quot;, xlim=c(1,3.5)) lines(density(X,bw=0.3),col=&quot;red&quot;,lwd=2) 3.4 Exploration III (2 variables) Nous verrons en détail dans les chapitres suivants comment croiser deux variables d’un point de vue statistiques. Mais on peut déjà indiquer brièvement comment les visualiser rapidement à l’aide de trois exemples 3.4.1 Deux variables qualitatives Tableau de contingence X &lt;- don$BLOC levels(X)&lt;-c(&quot;Capitalise&quot;,&quot;Socialiste&quot;) Y&lt;-cut(don$POP, breaks=c(0,10,30,100)) levels(Y) &lt;- c(&quot;petit&quot;,&quot;moyen&quot;,&quot;grand&quot;) tab&lt;-table(X,Y) addmargins(tab) #&gt; Y #&gt; X petit moyen grand Sum #&gt; Cap 9 3 5 17 #&gt; Soc 2 5 1 8 #&gt; Sum 11 8 6 25 Graphique plot(tab, col=c(&quot;yellow&quot;,&quot;orange&quot;,&quot;brown&quot;)) Test (Chi-2) test&lt;-chisq.test(X,Y) #&gt; Warning in chisq.test(X, Y): Chi-squared approximation may be incorrect test #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: X and Y #&gt; X-squared = 5.0336, df = 2, p-value = 0.08072 3.4.2 Deux variables quantitatives Paramètres principaux Y &lt;- don$TMI X&lt;-don$PNB summary(X) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 600 2300 8600 7580 12000 17800 summary(Y) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 5.80 8.50 9.70 12.99 14.50 43.00 Graphique plot(X,Y, xlab=&quot;PNB par habitant&quot;,ylab=&quot;Mortalité infantile&quot;) text(X,Y,don$PAYS,pos = 4,cex=0.6) Test (Pearson) cor.test(Y,X) #&gt; #&gt; Pearson&#39;s product-moment correlation #&gt; #&gt; data: Y and X #&gt; t = -4.1955, df = 23, p-value = 0.0003459 #&gt; alternative hypothesis: true correlation is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.8360497 -0.3558907 #&gt; sample estimates: #&gt; cor #&gt; -0.6584308 3.4.3 Une quantitative et une qualitative Graphique Y &lt;- don$TMI X &lt;- as.factor(don$BLOC) levels(X)&lt;-c(&quot;Capitalise&quot;,&quot;Socialiste&quot;) plot(X,Y, col=c(&quot;blue&quot;,&quot;red&quot;), xlab =&quot;Mortalité infantile&quot;, ylab = &quot;Bloc politique&quot;, horizontal=T) - Test (Fischer) mod&lt;-aov(Y~X) summary(mod) #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; X 1 797.4 797.4 20.85 0.000137 *** #&gt; Residuals 23 879.7 38.2 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.5 En résumé Nous avons survolé les principales fonctions élémentaires de R-Base pour montrer qu’il est facile et surtout rapide de les employer en lieu et place d’un tableur comme Excel ou d’un logiciel de statistique click-bouton. Il reste encore beaucoup à apprendre mais à ce stade il est important de bien consolider les acquis et de connaître par coeur le nom des principales fonctions de base qui ont été présentées au cours de ce chapitre. "],["04-Corrélation.html", "Partie 4 Corrélation 4.1 Préparation des données 4.2 Exploration visuelle 4.3 Coefficients de corrélation 4.4 Matrice de corrélation", " Partie 4 Corrélation Mise en place : Télécharger le dossier exo4 et décompressez le sur votre ordinateur. Puis ouvrez le projet R exo4.Rproj dans Rstudio. 4.1 Préparation des données 4.1.1 Chargement du tableau principal On charge notre bon vieux fichier des pays européens en 1988 don&lt;-read.table(file = &quot;resources/data/europe88/euro1988.csv&quot;, sep = &quot;;&quot;, header = T) don$BLOC&lt;-as.factor(don$BLOC) levels(don$BLOC)&lt;-c(&quot;Capitaliste&quot;,&quot;Socialiste&quot;) head(don) #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X #&gt; 1 ALB Socialiste 600 43.0 71 34 27 6 3.3 35 5 29 3.1 4825115 #&gt; 2 AUT Capitaliste 10000 10.3 75 55 12 12 1.4 18 14 84 7.6 4299715 #&gt; 3 BEL Capitaliste 9200 9.7 75 95 12 11 1.5 19 14 31 9.9 3636312 #&gt; 4 BGR Socialiste 2000 14.5 72 65 13 11 2.0 21 11 111 9.0 5206070 #&gt; 5 CHE Capitaliste 17800 6.8 77 61 12 9 1.5 17 14 41 6.6 3869378 #&gt; 6 CSK Socialiste 3200 13.9 71 74 14 12 2.0 24 11 128 15.6 4487005 #&gt; Y #&gt; 1 1684833 #&gt; 2 2335579 #&gt; 3 2667243 #&gt; 4 1930219 #&gt; 5 2243130 #&gt; 6 2540281 4.1.2 Choix des deux variables à analyser En dehors de BLOC et PAYS, on ne garde que deux variables que l’on renomme X et Y avec colnames() et que l’on convertit en type numérique général. Il suffira par la suite de modifier le choix des variables X et Y pour faire d’autres analyses. eur&lt;-don[,c(&quot;PAYS&quot;,&quot;BLOC&quot;,&quot;URB&quot;,&quot;TMI&quot;)] colnames(eur)&lt;-c(&quot;PAYS&quot;,&quot;BLOC&quot;,&quot;X&quot;,&quot;Y&quot;) eur$X&lt;-as.numeric(eur$X) eur$Y&lt;-as.numeric(eur$Y) head(eur) #&gt; PAYS BLOC X Y #&gt; 1 ALB Socialiste 34 43.0 #&gt; 2 AUT Capitaliste 55 10.3 #&gt; 3 BEL Capitaliste 95 9.7 #&gt; 4 BGR Socialiste 65 14.5 #&gt; 5 CHE Capitaliste 61 6.8 #&gt; 6 CSK Socialiste 74 13.9 4.1.3 On est malin … Mais comme on ne sait plus ce que sont X et Y, on le précise avec des chaînes de caractères qu’on pourra utiliser dans les graphiques. Et on peut préparer une version multilangue … # Pour la version française fr_titre &lt;- &quot;Les pays européens en 1988&quot; fr_nomX &lt;- &quot;Taux d&#39;urbanisation en %&quot; fr_nomY &lt;- &quot;Taux de mortalité infantile en p. 1000&quot; fr_auteur &lt;- &quot;Claude Grasland, Université Paris Diderot, 2020&quot; # Pour la version arabe ar_titre &lt;- &quot;البلدان الأوروبية في عام 1988&quot; ar_nomX &lt;- &quot;معدل التحضر في المائة&quot; ar_nomY &lt;- &quot;معدل وفيات الرضع في عام 1000&quot; ar_auteur &lt;- &quot;كلود غراسلاند، جامعة باريس ديدرو، 2020&quot; # Pour la version anglaise en_titre &lt;- &quot;European countries in 1988&quot; en_nomX &lt;- &quot;Urbanisation rate %&quot; en_nomY &lt;- &quot;Infant mortality rate p. 1000&quot; en_auteur &lt;- &quot;Claude Grasland, University Paris Diderot, 2020&quot; # Pour la version russe ru_titre &lt;- &quot;Европейские страны в 1988 году&quot; ru_nomX &lt;- &quot;Уровень урбанизации в %&quot; ru_nomY &lt;- &quot;Коэффициент младенческой смертности в 1000 году&quot; ru_auteur &lt;- &quot;Клод Грассленд, Парижский университет Дидро, 2020&quot; 4.1.4 On est paresseux … Comme on prévoit qu’il y aura des différences entre pays socialistes et capitalistes, on crée deux sous-tableaux eur_soc&lt;-eur[eur$BLOC==&quot;Socialiste&quot;,] eur_cap&lt;-eur[eur$BLOC==&quot;Capitaliste&quot;,] 4.2 Exploration visuelle 4.2.1 Visualisation avec plot(X,Y) La manière la plus simple d’analyser la relation entre X et Y est d’utiliser un simple plot plot(eur$X,eur$Y) La fonction plot() comporte de nombreux paramètres permettant d’améliorer le graphique et de l’habiller. Voici un exemple d’habillage en français plot(eur$X,eur$Y, main = fr_titre, # titre cex.main = 1, # police du titre sub = fr_auteur, # sous-titre cex.sub = 0.6, # police du sous-titre xlab = fr_nomX, # nom de l&#39;axe X xlim = c(20,100), # intervalle de l&#39;axe X ylab = fr_nomY, # nom de l&#39;axe Y ylim = c(0,50), # intervalle de l&#39;axe Y cex.axis = 0.8, # police des gradations d&#39;axes cex.lab = 0.8, # police des noms d&#39;axes cex = 0.6, # taille des symboles col = &quot;blue&quot;) # couleur des symboles Ou en anglais: il suffit de changer le nom des variables relatives aux titres. plot(eur$X,eur$Y, main = en_titre, # titre cex.main = 1, # police du titre sub = en_auteur, # sous-titre cex.sub = 0.5, # police du sous-titre xlab = en_nomX, # nom de l&#39;axe X xlim = c(20,100), # intervalle de l&#39;axe X ylab = en_nomY, # nom de l&#39;axe Y ylim = c(0,50), # intervalle de l&#39;axe Y cex.axis = 0.7, # police des gradations d&#39;axes cex.lab = 0.7, # police des noms d&#39;axes cex = 0.6, # taille des symboles col = &quot;blue&quot;) # couleur des symboles 4.2.2 Identification des points avec cor + text(…) On peut ajouter au graphique généré par plot(X,Y) une couche de labels avec text(X,Y,Code). On précise la position avec pos =, la taille de police avex cex = et la couleur avec col =. plot(x = eur$X, y = eur$Y, cex=0.5, col= &quot;blue&quot;, ylim =c(0,50)) text(x = eur$X, y = eur$Y, label = eur$PAYS, cex = 0.7, pos=3, col = &quot;blue&quot;) 4.2.3 Ajout de lignes horizontales ou verticales avec cor() + abline(…) On peut rajouter à un graphique des lignes horizontales ou verticales avec abline en précisant leur position avec h= ou v=, leur épaisseur avec lwd = , leur style avec lty= et leur couleur avec col= plot(eur$X,eur$Y, main = fr_titre, # titre cex.main = 1, # police du titre sub = fr_auteur, # sous-titre cex.sub = 0.6, # police du sous-titre xlab = fr_nomX, # nom de l&#39;axe X xlim = c(20,100), # intervalle de l&#39;axe X ylab = fr_nomY, # nom de l&#39;axe Y ylim = c(0,50), # intervalle de l&#39;axe Y cex.axis = 0.8, # police des gradations d&#39;axes cex.lab = 0.8, # police des noms d&#39;axes cex = 0.6, # taille des symboles col = &quot;blue&quot;) # couleur des symboles # Ajout d&#39;une ligne horizontale correspondant à la moyenne de Y abline(h=mean(eur$Y),col=&quot;red&quot;,lwd = 1, lty = 2) # Ajout d&#39;une ligne verticlae correspondant à la moyenne de X abline(v=mean(eur$X),col=&quot;red&quot;,lwd = 1, lty = 2) text(x = eur$X, y = eur$Y, label = eur$PAYS, cex = 0.6, pos=3, col = &quot;blue&quot;) La fonction abline() peut servir aussi à tracer la droite de régression Y=aX+b produite par la fonction lm() plot(eur$X,eur$Y) maregression = lm(eur$Y~eur$X) abline(maregression,col=&quot;red&quot;) 4.2.4 Au delà de R-Base … Il existe des packages spécialisés permettant de faire des graphiques plus sophistiqués. Mais on les apprendra ultérieuement. Juste un exemple : library(car) scatterplot(eur$X,eur$Y) 4.3 Coefficients de corrélation 4.3.1 Définition 4.3.1.1 Relation linéaire/monotone/complexe il existe une relation linéaire entre deux variables quantitatives X et Y si l’on peut prédire leurs valeurs respectives par les fonctions Y = a1.X + b1 et X = a2.X = b2 il existe une relation monotone entre deux variables quantitatives X et Y si l’on peut prédire les valeurs Y en fonction de celle de X far une fonction Y=f(X) qui est strictement croissante ou strictement décroissante. il existe une relation complexe entre deux variables quantitatives X et Y si l’on peut prédire les valeurs Y en fonction de celle de X par une fonction Y=f(X) qui comporte au moins un point minimum ou maximum de changement de pente (annulation de la dérivée première) 4.3.1.2 Relation positive/négative/nulle Une relation linéaire ou monotone est positive si à un accroissement de X correspond un accroissement de Y Une relation linéaire ou monotone est négative si à un accroissement de X correspond une diminution de Y une relation est nulle si une variation de X n’entraine pas de variation de Y 4.3.1.3 Relation forte/faible/nulle Une relation linéaire est forte si une valeur de X permet de prédire la valeur de Y avec une faible marge d’erreur. Une relation linéaire ou monotone est faible si une valeur de X permet de prédire la valeur de Y avec une forte marge d’erreur. une relation linéaire est nulle si une valeur de X ne permet aucunement de prédire la valeur de Y 4.3.1.4 Relation significative/non siginificative Une relation linéaire est significative si l’effectif permettant de la mettre en évidence est suffisamment grand pour qu’on puisse exclure qu’elle soit l’effet du hasard. Une relation linéaire ou monotone est non significative si l’effectif permettant de la mettre en évidence n’est pas suffisamment grand pour qu’on puisse exclure qu’elle soit l’effet du hasard. On considère traditionnellement qu’une relation est significative s’il y a moins de 5% de chances qu’elle soit l’effet du hasard (p-value &lt; 0.05). 4.3.2 La fonction cor() La fonction cor() permet de mesurer le coefficient de corrélation de deux variable X et Y. Elle permet de détecter les relations linéaires en choisissant le paramètre (par défaut) method = pearson Elle permet de détecter les relations non linéaires en choisissant le paramètre method = spearman qui mesure l’existence d’une relation monotone entre les rangs de X et Y La syntaxe de la fonction cor() est très simple et permet de calculer trois types de corrélation. La méthode par défaut est pearson c’est-à-dire le coefficient de corrélation linéaire cor(eur$X,eur$Y) #&gt; [1] -0.6547219 cor(eur$X,eur$Y, method = &quot;spearman&quot;) #&gt; [1] -0.5699443 cor(eur$X,eur$Y, method = &quot;kendall&quot;) #&gt; [1] -0.4053653 cor() permet de savoir si la relation est linéaire ou monotone cor() permet de repérer l’effet d’une valeur exceptionnelle cor() permet de savoir si la relation est positive ou négative cor() permet de avoir si la relation est forte ou faible 4.3.3 La fonction cor.test() la fonction cor() permet de savoir si une relation est forte ou faible, positive ou négative, linéaire ou non linéaire. Mais cor() ne permet pas de savoir si une relation est significative ou pas. C’est la fonction cor.test() qui permet de tester la significativité d’une relation en fournissant un intervalle de confiance du coefficient de corrélation et une probabilité de rejet de H0 : il n’y a pas de relation appelée en anglais la p-value. p-value &gt; 0.10 : relation non significative 0.10 &gt; p-value &gt; 0.05 : relation presque significative p-value &lt; 0.05 : relation significative p-value &lt; 0.01 : relation très significative Même syntaxe que cor() : cor.test(eur$Y,eur$X) #&gt; #&gt; Pearson&#39;s product-moment correlation #&gt; #&gt; data: eur$Y and eur$X #&gt; t = -4.1541, df = 23, p-value = 0.0003835 #&gt; alternative hypothesis: true correlation is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.8340765 -0.3501838 #&gt; sample estimates: #&gt; cor #&gt; -0.6547219 cor.test(eur$Y,eur$X, method=&quot;spearman&quot;) #&gt; Warning in cor.test.default(eur$Y, eur$X, method = &quot;spearman&quot;): Cannot compute #&gt; exact p-value with ties #&gt; #&gt; Spearman&#39;s rank correlation rho #&gt; #&gt; data: eur$Y and eur$X #&gt; S = 4081.9, p-value = 0.002936 #&gt; alternative hypothesis: true rho is not equal to 0 #&gt; sample estimates: #&gt; rho #&gt; -0.5699443 4.3.4 En résumé : intensité ou significativité ? Le carré du coefficient de corrélation appelé r-square ou r2 permet de mesurer le pouvoir explicatif de X par rapport à Y. Il ne dépend pas du nombre d’observations. le test de significativité ou p-value mesure la significativité de la relation c’est-à-dire le fait que la relation entre X et Y ne soit pas l’effet du hasard. Il dépend à la fois du niveau de corrélation et du nombre d’observations. A gauche : une relation forte mais non significative A droite : une relation faible mais très significative Analysez le diagramme suivant : Analysez les deux diagrammes suivants : 4.4 Matrice de corrélation 4.4.1 Objectif de l’analyse Soit un ensemble de variables quantitatives continues \\((X_1...X_i...X_k)\\) décrivant les mêmes individus. On se propose de construire la matrice \\(R_{ij}[1...i...k ; 1...j...k]\\) indiquant pour chaque paire de variable \\(ij\\) leur coefficient de corrélation (linéaire ou de rang) Puis de construire la matrice \\(p_{ij}[1...i...k ; 1...j...k]\\) indiquant pour chaque paire de variable \\(ij\\) la probabilité H0 d’absence de relation, c’est-à-dire le degré de significativité de la corrélation. 4.4.2 Utilisation des résultats Mettre en évidence des groupes de variables significativement corrélées entre elles, que ce soit de façon positive ou négative. Préparer la réalisation d’une analyse en composantes principales qui regroupera les variables corrélées entre elles en facteurs. Identifier des variables non redondantes pour construire un modèle de régression multiple. Indentifier des variables fortement corrélées pouvant servir de proxy pour estimer des valeurs manquantes dans un tableau 4.4.3 Visualisation d’une matrice de corrélation _ Sous la forme de tableaux montrant si possible à la fois les coefficients de corrélation et les seuils de significativité. Sous la forme de graphes montrant de façon visuelle l’intesité, le signe et la significativité des relations. Sous la forme de plans factoriels résultant d’une analyse en composantes principales. Chacun de ces objectifs supposant en général l’emploi de packages spécialisés. 4.4.4 Exemple : création d’un tableau quantitatif On ne sélectionne que des variables quantitatives et on ajoute les noms des pays en attribut des lignes. tab&lt;-don[,c(&quot;PNB&quot;,&quot;TMI&quot;,&quot;ESP&quot;,&quot;URB&quot;,&quot;NAT&quot;,&quot;MOR&quot;,&quot;FEC&quot;)] row.names(tab)&lt;-don$PAYS head(tab,3) #&gt; PNB TMI ESP URB NAT MOR FEC #&gt; ALB 600 43.0 71 34 27 6 3.3 #&gt; AUT 10000 10.3 75 55 12 12 1.4 #&gt; BEL 9200 9.7 75 95 12 11 1.5 On calcule la corrélation resul&lt;-cor(tab) str(resul) #&gt; num [1:7, 1:7] 1 -0.658 0.83 0.508 -0.466 ... #&gt; - attr(*, &quot;dimnames&quot;)=List of 2 #&gt; ..$ : chr [1:7] &quot;PNB&quot; &quot;TMI&quot; &quot;ESP&quot; &quot;URB&quot; ... #&gt; ..$ : chr [1:7] &quot;PNB&quot; &quot;TMI&quot; &quot;ESP&quot; &quot;URB&quot; ... On affiche la matrice de corrélation en arrondissant les valeurs round(resul,3) #&gt; PNB TMI ESP URB NAT MOR FEC #&gt; PNB 1.000 -0.658 0.830 0.508 -0.466 0.125 -0.614 #&gt; TMI -0.658 1.000 -0.728 -0.655 0.797 -0.414 0.814 #&gt; ESP 0.830 -0.728 1.000 0.583 -0.501 -0.071 -0.619 #&gt; URB 0.508 -0.655 0.583 1.000 -0.514 0.352 -0.554 #&gt; NAT -0.466 0.797 -0.501 -0.514 1.000 -0.482 0.950 #&gt; MOR 0.125 -0.414 -0.071 0.352 -0.482 1.000 -0.426 #&gt; FEC -0.614 0.814 -0.619 -0.554 0.950 -0.426 1.000 4.4.5 Utilisation du package psych La fonction cor.test() de Rbase ne permet pas de calculer les corrélations pour toute une matrice. Aussi on charge le package psych qui dispose d’une fonction corr.test() beaucoup plus puissante qui crée plusieurs matrices de résultats library(psych) results&lt;-psych::corr.test(tab) names(results) #&gt; [1] &quot;r&quot; &quot;n&quot; &quot;t&quot; &quot;p&quot; &quot;se&quot; &quot;sef&quot; &quot;adjust&quot; &quot;sym&quot; #&gt; [9] &quot;ci&quot; &quot;ci.adj&quot; &quot;Call&quot; On retrouve la matrice des coefficiences de corrélation round(results$r,3) #&gt; PNB TMI ESP URB NAT MOR FEC #&gt; PNB 1.000 -0.658 0.830 0.508 -0.466 0.125 -0.614 #&gt; TMI -0.658 1.000 -0.728 -0.655 0.797 -0.414 0.814 #&gt; ESP 0.830 -0.728 1.000 0.583 -0.501 -0.071 -0.619 #&gt; URB 0.508 -0.655 0.583 1.000 -0.514 0.352 -0.554 #&gt; NAT -0.466 0.797 -0.501 -0.514 1.000 -0.482 0.950 #&gt; MOR 0.125 -0.414 -0.071 0.352 -0.482 1.000 -0.426 #&gt; FEC -0.614 0.814 -0.619 -0.554 0.950 -0.426 1.000 Mais aussi la matrice des tests de significativité round(results$p,3) #&gt; PNB TMI ESP URB NAT MOR FEC #&gt; PNB 0.000 0.006 0.000 0.086 0.114 1.000 0.014 #&gt; TMI 0.000 0.000 0.001 0.006 0.000 0.170 0.000 #&gt; ESP 0.000 0.000 0.000 0.027 0.086 1.000 0.013 #&gt; URB 0.010 0.000 0.002 0.000 0.086 0.254 0.045 #&gt; NAT 0.019 0.000 0.011 0.009 0.000 0.103 0.000 #&gt; MOR 0.552 0.040 0.738 0.085 0.015 0.000 0.170 #&gt; FEC 0.001 0.000 0.001 0.004 0.000 0.034 0.000 On peut aussi faire une jolie matrice colorée avec des tests de signficativité sous forme d’étoiles corPlot(tab, stars=TRUE, diag=FALSE) 4.4.6 Utilisation du package factoMineR Si on veut voir les axes factoriels d’une analyse en composante principales on utilise la fonction PCA() de FactoMineR library(FactoMineR) monacp&lt;-PCA(tab, graph=FALSE) On pourra ensuite visualiser la corrélation des variables avec les principaux axes factoriels et les coordonnées des individus sur ceux-ci. 4.4.6.1 Corrélation des variables avec les axes factoriels plot.PCA(monacp,choix = &quot;varcor&quot;) 4.4.6.2 Coordonnées des individus sur les axes factoriels plot.PCA(monacp,choix = &quot;ind&quot;,) "],["05-Régression.html", "Partie 5 Régression 5.1 Préparation des données 5.2 Forme de la relation 5.3 Ajustement du modèle 5.4 Diagnostics du modèle 5.5 Améliorations du modèle", " Partie 5 Régression Mise en place : Télécharger le dossier exo5 et décompressez le sur votre ordinateur. Puis ouvrez le projet R exo5.Rproj dans Rstudio. 5.1 Préparation des données 5.1.1 Chargement du tableau principal On charge notre bon vieux fichier des pays européens en 1988 don&lt;-read.table(file = &quot;resources/data/europe88/euro1988.csv&quot;, sep = &quot;;&quot;, header = T) don$BLOC&lt;-as.factor(don$BLOC) levels(don$BLOC)&lt;-c(&quot;Capitaliste&quot;,&quot;Socialiste&quot;) head(don) #&gt; PAYS BLOC PNB TMI ESP URB NAT MOR FEC JEU VIE SUP POP X #&gt; 1 ALB Socialiste 600 43.0 71 34 27 6 3.3 35 5 29 3.1 4825115 #&gt; 2 AUT Capitaliste 10000 10.3 75 55 12 12 1.4 18 14 84 7.6 4299715 #&gt; 3 BEL Capitaliste 9200 9.7 75 95 12 11 1.5 19 14 31 9.9 3636312 #&gt; 4 BGR Socialiste 2000 14.5 72 65 13 11 2.0 21 11 111 9.0 5206070 #&gt; 5 CHE Capitaliste 17800 6.8 77 61 12 9 1.5 17 14 41 6.6 3869378 #&gt; 6 CSK Socialiste 3200 13.9 71 74 14 12 2.0 24 11 128 15.6 4487005 #&gt; Y #&gt; 1 1684833 #&gt; 2 2335579 #&gt; 3 2667243 #&gt; 4 1930219 #&gt; 5 2243130 #&gt; 6 2540281 5.1.2 Choix des deux variables à analyser En dehors de BLOC et PAYS, on ne garde que les deux variables PNB et TMI que l’on renomme X et Y avec colnames() et que l’on convertit en type numérique général. Il suffira par la suite de modifier le choix des variables X et Y pour faire d’autres analyses. eur&lt;-don[,c(&quot;PAYS&quot;,&quot;BLOC&quot;,&quot;PNB&quot;,&quot;TMI&quot;)] colnames(eur)&lt;-c(&quot;PAYS&quot;,&quot;BLOC&quot;,&quot;X&quot;,&quot;Y&quot;) eur$X&lt;-as.numeric(eur$X) eur$Y&lt;-as.numeric(eur$Y) head(eur) #&gt; PAYS BLOC X Y #&gt; 1 ALB Socialiste 600 43.0 #&gt; 2 AUT Capitaliste 10000 10.3 #&gt; 3 BEL Capitaliste 9200 9.7 #&gt; 4 BGR Socialiste 2000 14.5 #&gt; 5 CHE Capitaliste 17800 6.8 #&gt; 6 CSK Socialiste 3200 13.9 On prépare les titres # Pour la version française titre &lt;- &quot;Les pays européens en 1988&quot; nomX &lt;- &quot;Produit National brut ($/hab)&quot; nomY &lt;- &quot;Taux de mortalité infantile en p. 1000&quot; auteur &lt;- &quot;Claude Grasland, Université Paris Diderot, 2020&quot; Comme on prévoit qu’il y aura des différences entre pays socialistes et capitalistes, on crée deux sous-tableaux eur_soc&lt;-eur[eur$BLOC==&quot;Socialiste&quot;,] eur_cap&lt;-eur[eur$BLOC==&quot;Capitaliste&quot;,] 5.2 Forme de la relation 5.2.1 Vérification de la normalité de X et Y La régression linéaire met en relation deux variables quantitatives X et Y dont on suppose que la distribution est normale (gaussienne) , c’est-à-dire unimodale et symérique. On peut tester la normalité des disributions par inspection visuelle à l’aide de hist() Les fonctions qqnorm() et qqline() sont plus précises … qqnorm(eur$X, col=&quot;blue&quot;,ylab=nomX) qqline(eur$X,col=&quot;red&quot;) Les fonctions qqnorm() et qqline() sont plus précises … qqnorm(eur$Y, col=&quot;blue&quot;,ylab=nomY) qqline(eur$Y,col=&quot;red&quot;) Mais la solution la plus précise est le test de Shapiro qui pose l’hypothèse H0 : la distribution est normale. shapiro.test(eur$X) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: eur$X #&gt; W = 0.9175, p-value = 0.04495 shapiro.test(eur$Y) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: eur$Y #&gt; W = 0.72466, p-value = 1.594e-05 5.2.2 Visualisation de la forme de la relation On peut faire un simple plot(X,Y). Mais on peut aussi créer pour cela une fonction personalisée adapté à ses préférences monplot &lt;- function (varX , varY, varN ) { plot(varX,varY, main = titre, # titre cex.main = 1, # police du titre cex = 0.6, # taille des symboles pch = 19, # cercles pleins col = &quot;red&quot;) # couleur des symboles text(varX,varY,varN,cex=0.5,pos=3) # nom des élément abline(v=mean(varX),lty=2,lwd=1,col=&quot;blue&quot;) # moyenne X abline(h=mean(varY),lty=2,lwd=1,col=&quot;blue&quot;) # moyenne Y } Je peux désormais utiliser ma fonction monplot() ! monplot(varX = eur$X,varY = eur$Y, varN = eur$PAYS) Je peux décider de ne pas afficher le label des points. monplot(varX = eur$X,varY = eur$Y, varN = NULL) 5.2.3 Analyse de la corrélation Je commence par celuler le coefficient de corrélation linéaire (r) et le pouvoir explicatif de X par rapport à Y (r2) cor(eur$X,eur$Y) # coefficient de corrélation (r) #&gt; [1] -0.6584308 100*cor(eur$X,eur$Y)**2 # pouvoir explicatif (r2) #&gt; [1] 43.35312 Puis, je teste la significativité de la corrélation linéaire … cor.test(eur$X,eur$Y) # test de significativité (p-value) #&gt; #&gt; Pearson&#39;s product-moment correlation #&gt; #&gt; data: eur$X and eur$Y #&gt; t = -4.1955, df = 23, p-value = 0.0003459 #&gt; alternative hypothesis: true correlation is not equal to 0 #&gt; 95 percent confidence interval: #&gt; -0.8360497 -0.3558907 #&gt; sample estimates: #&gt; cor #&gt; -0.6584308 … et je la compare à celle du coefficient de corrélation de rang de Spearman cor.test(eur$X,eur$Y, method=&quot;spearman&quot;) # test de significativité (p-value) #&gt; Warning in cor.test.default(eur$X, eur$Y, method = &quot;spearman&quot;): Cannot compute #&gt; exact p-value with ties #&gt; #&gt; Spearman&#39;s rank correlation rho #&gt; #&gt; data: eur$X and eur$Y #&gt; S = 4796.3, p-value = 1.094e-07 #&gt; alternative hypothesis: true rho is not equal to 0 #&gt; sample estimates: #&gt; rho #&gt; -0.8447182 On peut conclure des analyses précédentes que : il existe une relation significative (p-value &lt; 0.05) cette relation est positive (r &gt; 0 ) cette relation a un pouvoir explicatif moyen (r2 = 45%) Mais … la relation est monotone mais non linéaire car le coefficient de Spearman (-0.90) est beaucoup plus fort que le coefficient de Pearson (-0.68) et également plus significatif 5.3 Ajustement du modèle 5.3.1 Hypothèses statistiques Conditions a priori X et Y sont deux variables normales (gaussienne) il existe une corrélation significative entre X et Y (p&lt; 0.05) X explique une part suffisamment forte de Y (r2 &gt; 20% ) Le nuage de point affiche une forme linéaire les points sont répartis de façon régulière le long du nuage de points Il n’y a pas de valeurs exceptionnelles susceptibles de perturber le calcul. On charge le package car (companion to applied regession). library(car) Méthode des moindres carrés ordinaire (MCO) La droite \\(y_i = a.x_i + b + \\epsilon_i\\) qui minimise la somme des carrés des écarts entre les valeurs observées \\(y_i\\) et les valeurs estimées \\(\\hat{y_i}\\) a pour équation : \\(COV(X,Y) = \\sum_{i=1}^k \\sum_{j=1}^k (x_{i}-\\bar{x})^2.(y_{i}-\\bar{y})^2\\) \\(a = COV(X,Y) / (\\sigma_X)^2\\) \\(b = \\bar{y} - a.\\bar{x}\\) Analyse de la variance La somme des carré des écarts totale (\\(SCE_{tot}\\)) correspond à la variance de la variable à expliquer : \\(SCE_{tot} = \\sum_{i=1}^k (y_{i}-\\bar{y})^2\\) La somme des carré des écarts résiduels (\\(SCE_{err}\\)) correspond à la somme des carrés des différences entre valeurs observées et estimées \\(SCE_{error} = \\sum_{i=1}^k (y_{i}-\\hat{y})^2\\) Le pouvoir explicatif d’un modèle de régression correspond à la part de la variance de Y expliquée par X. \\(Var. expliquée = (SCE_{tot}-SCE_{res}) / SCE_{tot} = r(X,Y)^{2}\\) Vérifications a posteriori Un modèle de régression n’est valide que si les résidus de ce modèle \\(\\epsilon_i = (y_i - \\hat{y}_i)\\) remplissent les conditions suivantes : Normalité de la distribution des résidus Absence d’autocorrélation des résidus Homogénéité de la variance des résidus Absence de valeur à fort effet de levier Si ces quatre conditions ne sont pas remplies, les estimations de Y en fonction de X seront entâchées d’erreur et leur intervalle de confiance ne sera pas valable. 5.3.2 La fonction lm() La fonction lm() ou lm est l’abbréviation de linear model permet d’effectuer la plupart des modèles de régression linéaire basés sur la méthode des moindres carrés ordinaire. Sa syntaxe est a priori très simple et renvoie les coefficients b et a du modèle de régression. lm(eur$Y~eur$X) #&gt; #&gt; Call: #&gt; lm(formula = eur$Y ~ eur$X) #&gt; #&gt; Coefficients: #&gt; (Intercept) eur$X #&gt; 20.890709 -0.001042 Mais en réalité lm() crée une liste de résultats que l’on a intérêt à stocker pour en examiner les composantes une à une. monmodel&lt;-lm(eur$Y~eur$X) str(monmodel) #&gt; List of 12 #&gt; $ coefficients : Named num [1:2] 20.89071 -0.00104 #&gt; ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;(Intercept)&quot; &quot;eur$X&quot; #&gt; $ residuals : Named num [1:25] 22.73 -0.17 -1.6 -4.31 4.46 ... #&gt; ..- attr(*, &quot;names&quot;)= chr [1:25] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... #&gt; $ effects : Named num [1:25] -64.96 26.96 -5.02 -8.69 2.2 ... #&gt; ..- attr(*, &quot;names&quot;)= chr [1:25] &quot;(Intercept)&quot; &quot;eur$X&quot; &quot;&quot; &quot;&quot; ... #&gt; $ rank : int 2 #&gt; $ fitted.values: Named num [1:25] 20.27 10.47 11.3 18.81 2.34 ... #&gt; ..- attr(*, &quot;names&quot;)= chr [1:25] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... #&gt; $ assign : int [1:2] 0 1 #&gt; $ qr :List of 5 #&gt; ..$ qr : num [1:25, 1:2] -5 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 ... #&gt; .. ..- attr(*, &quot;dimnames&quot;)=List of 2 #&gt; .. .. ..$ : chr [1:25] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... #&gt; .. .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;eur$X&quot; #&gt; .. ..- attr(*, &quot;assign&quot;)= int [1:2] 0 1 #&gt; ..$ qraux: num [1:2] 1.2 1.14 #&gt; ..$ pivot: int [1:2] 1 2 #&gt; ..$ tol : num 1e-07 #&gt; ..$ rank : int 2 #&gt; ..- attr(*, &quot;class&quot;)= chr &quot;qr&quot; #&gt; $ df.residual : int 23 #&gt; $ xlevels : Named list() #&gt; $ call : language lm(formula = eur$Y ~ eur$X) #&gt; $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language eur$Y ~ eur$X #&gt; .. ..- attr(*, &quot;variables&quot;)= language list(eur$Y, eur$X) #&gt; .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 #&gt; .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 #&gt; .. .. .. ..$ : chr [1:2] &quot;eur$Y&quot; &quot;eur$X&quot; #&gt; .. .. .. ..$ : chr &quot;eur$X&quot; #&gt; .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;eur$X&quot; #&gt; .. ..- attr(*, &quot;order&quot;)= int 1 #&gt; .. ..- attr(*, &quot;intercept&quot;)= int 1 #&gt; .. ..- attr(*, &quot;response&quot;)= int 1 #&gt; .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; #&gt; .. ..- attr(*, &quot;predvars&quot;)= language list(eur$Y, eur$X) #&gt; .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; #&gt; .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;eur$Y&quot; &quot;eur$X&quot; #&gt; $ model :&#39;data.frame&#39;: 25 obs. of 2 variables: #&gt; ..$ eur$Y: num [1:25] 43 10.3 9.7 14.5 6.8 13.9 9.2 8.6 8.4 9 ... #&gt; ..$ eur$X: num [1:25] 600 10000 9200 2000 17800 3200 3700 12000 12600 4800 ... #&gt; ..- attr(*, &quot;terms&quot;)=Classes &#39;terms&#39;, &#39;formula&#39; language eur$Y ~ eur$X #&gt; .. .. ..- attr(*, &quot;variables&quot;)= language list(eur$Y, eur$X) #&gt; .. .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 #&gt; .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 #&gt; .. .. .. .. ..$ : chr [1:2] &quot;eur$Y&quot; &quot;eur$X&quot; #&gt; .. .. .. .. ..$ : chr &quot;eur$X&quot; #&gt; .. .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;eur$X&quot; #&gt; .. .. ..- attr(*, &quot;order&quot;)= int 1 #&gt; .. .. ..- attr(*, &quot;intercept&quot;)= int 1 #&gt; .. .. ..- attr(*, &quot;response&quot;)= int 1 #&gt; .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; #&gt; .. .. ..- attr(*, &quot;predvars&quot;)= language list(eur$Y, eur$X) #&gt; .. .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; #&gt; .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;eur$Y&quot; &quot;eur$X&quot; #&gt; - attr(*, &quot;class&quot;)= chr &quot;lm&quot; Un résumé des résultats principaux est fourni avec summary() appliqué à l’objet créé par lm(). summary(monmodel) On obtient ainsi : l’équation de la droite Y = a.X+b la significativité et l’intervalle de confiance de a et b le pouvoir explicatif du modèle \\(r(X,Y)^2\\) #&gt; #&gt; Call: #&gt; lm(formula = eur$Y ~ eur$X) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -7.8351 -2.7982 -1.6039 0.6391 22.7345 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 20.8907087 2.2796125 9.164 3.86e-09 *** #&gt; eur$X -0.0010420 0.0002484 -4.196 0.000346 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 6.427 on 23 degrees of freedom #&gt; Multiple R-squared: 0.4335, Adjusted R-squared: 0.4089 #&gt; F-statistic: 17.6 on 1 and 23 DF, p-value: 0.0003459 On peut également analyser plus en détail la variance en appliquant anova() à l’objet créé par lm() ce qui monte la quantité de variance expliquée par X et la quantité de variance résiduelle. Le test de Fisher (Pr&gt;F) détermine si le modèle est significatif et renvoie la même valeur que la p-value du coeff. de corrélation. anova(monmodel) #&gt; Analysis of Variance Table #&gt; #&gt; Response: eur$Y #&gt; Df Sum Sq Mean Sq F value Pr(&gt;F) #&gt; eur$X 1 727.09 727.09 17.602 0.0003459 *** #&gt; Residuals 23 950.05 41.31 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 On peut extraire de l’objet créé par lm() les valeurs estimées de Y et les résidus c’est-à-dire les erreurs d’estimation. eur$Y_estim&lt;-monmodel$fitted.values eur$Y_resid&lt;-monmodel$residuals head(eur) #&gt; PAYS BLOC X Y Y_estim Y_resid #&gt; 1 ALB Socialiste 600 43.0 20.26548 22.7345189 #&gt; 2 AUT Capitaliste 10000 10.3 10.47025 -0.1702487 #&gt; 3 BEL Capitaliste 9200 9.7 11.30389 -1.6038855 #&gt; 4 BGR Socialiste 2000 14.5 18.80662 -4.3066167 #&gt; 5 CHE Capitaliste 17800 6.8 2.34229 4.4577101 #&gt; 6 CSK Socialiste 3200 13.9 17.55616 -3.6561615 On peut tracer la droite de régression avec abline() monplot(eur$X,eur$Y,eur$PAYS) abline(monmodel, col=&quot;blue&quot;,lwd=2) On peut enfin analyser a posteriori la qualité de la régression avec plot(). par(mfrow=c(2,2)) plot(monmodel,labels.id = eur$PAYS) 5.4 Diagnostics du modèle 5.4.1 Diagnostic 1 : Indépendance des résidus ? L’objectif est de savoir si les résidus se répartissent régulièrement de part et d’autre de la droite de régression tout au long de celle-ci. Si c’est bien le cas le graphique residuals Vs Fitted généré par plot(monmodel,1) devrait donner une droite horizontale : plot(monmodel,1,labels.id = eur$PAYS) On peut tester statistiquement l’indépendance des résidus à l’aide du test de Durbin-Watson qui mesure si deux valeurs successives ont des résidus proches. L’indépendance des résidus est rejetée si p-value &lt; 0.05 durbinWatsonTest(monmodel) #&gt; lag Autocorrelation D-W Statistic p-value #&gt; 1 -0.03883526 1.455678 0.204 #&gt; Alternative hypothesis: rho != 0 Ici on trouve p-value &gt; 0.05 donc les résidus sont indépendants. 5.4.2 Diagnostic 2 : Normalité des résidus ? L’objectif est de savoir si les résidus ont une distribution normale Si c’est bien le cas le graphique généré par plot(monmodel,2) devrait donner une droite oblique : plot(monmodel,2,labels.id = eur$PAYS) On peut tester statistiquement la normalité des résidus à l’aide du test de Shapiro-Wilk. Les résidus sont normaux si p-value &gt; 0.05 shapiro.test(monmodel$residuals) #&gt; #&gt; Shapiro-Wilk normality test #&gt; #&gt; data: monmodel$residuals #&gt; W = 0.81605, p-value = 0.0004263 Ici on trouve une p-value très clairement inférieure à 0.05 donc la distribution des résidus n’est pas gaussienne. 5.4.3 Diagnostic 3 : Homogénéité des résidus ? L’objectif est de savoir si la variance des résidus est constante, c’est-à-dire si il s’écarte environ de la même distance tout au long de la droite . Si c’est bien le cas le graphique généré par plot(monmodel,3) devrait donner une droite horizontale plot(monmodel,3,labels.id = eur$PAYS) On peut tester statistiquement l’homogénéité des résidus à l’aide du test de Breush-Pagan. L’hypothèse d’homogénéité est rejetée si la p-value est inférieure à 0.05. ncvTest(monmodel) #&gt; Non-constant Variance Score Test #&gt; Variance formula: ~ fitted.values #&gt; Chisquare = 9.429701, Df = 1, p = 0.002135 Ici, la p-value est inférieure à 0.05 donc les résidus ne sont pas homogènes. 5.4.4 Diagnostic 4 : Absence de valeur exceptionnelles ? L’objectif est de savoir s’il existe des valeurs qui exercent une influence exceptionnelle sur les résultats de la régression. On peut reprérer ces valeurs de plusieurs manières, notamment à l’aide de la distance de Cook générée par plot(monmodel,4).O n repère le cas particulier de l’Albanie : plot(monmodel,4,labels.id = eur$PAYS) Le test statistique de Bonferroni permet de déterminer s’il existe des valeurs exceptionnelles avec une p-value &lt; 0.05. outlierTest(monmodel, labels = eur$PAYS) #&gt; rstudent unadjusted p-value Bonferroni p #&gt; ALB 5.905381 6.0791e-06 0.00015198 Ici, on doit conclure qu’il existe au moins une valeur exceptionnelle, l’Albanie, susceptible de fausser les conclusions du modèle de régression. 5.5 Améliorations du modèle 5.5.1 Modèle linéaire (R2 = 46%) scatterplot(eur$X,eur$Y, ellipse = T,smooth = F,pch=19) text(eur$X,eur$Y, eur$PAYS, col=&quot;red&quot;,pos=2,cex=0.6) 5.5.2 Modèle linéaire sans l’Albanie (R2 = 53%) eur2&lt;-eur[eur$PAYS !=&quot;ALB&quot;,] scatterplot(eur2$X,eur2$Y, ellipse = T,smooth = F,pch=19) text(eur2$X,eur2$Y, eur2$PAYS, col=&quot;red&quot;,pos=2,cex=0.6) 5.5.3 Modèle exponentiel (R2 = 63%) scatterplot(eur$X,log(eur$Y), ellipse = T,smooth = F, pch=19) text(eur$X,log(eur$Y), eur$PAYS, col=&quot;red&quot;,pos=2,cex=0.6) 5.5.4 Modèle puissance (R2 = 83%) scatterplot(log(eur$X),log(eur$Y), ellipse = T,smooth = F, pch=19) text(log(eur$X),log(eur$Y), eur$PAYS, col=&quot;red&quot;,pos=2,cex=0.6) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
